#ifndef _GAME_HUMAN_CEU
#define _GAME_HUMAN_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "map.ceu"
#include "game-nav.ceu"
#include "game-fortify.ceu"
#include "game-attack.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;
input void SDL_MOUSEBUTTONDOWN;

class GameHuman with
    var Map* map   = null;
    var int  me    = 0;

    event void ok;
do
    _assert(_REN != null);
    _assert(_L   != null);

    _assert(this.map != null);
    _assert(this.me  != 0);

    // last "fortify" state
    var int state;
        _lua_getglobal(_L, "STATES");       // [ SS ]
        state = _lua_objlen(_L, -1);
        _lua_rawgeti(_L, -1, state);       // [ SS | S ]
        _lua_getfield(_L, -1, "type");     // [ SS | S | type ]
        _assert( _lua_type(_L,-1) == _LUA_TSTRING );
        _assert( _strcmp("fortify", _lua_tostring(_L,-1)) == 0
              or _strcmp("attack",  _lua_tostring(_L,-1)) == 0 );
        _lua_pop(_L, 3);                    // [ ]

    // show navigate => (fortify||attack)

    // avoid navigation for "0st" state
    if state > 1 then
        var GameNav nav with
            this.map = map;
            this.me  = me;
        end;
        await nav.ok;
    end

    // current state type
    _lua_getglobal(_L, "STATES");       // [ SS ]
    _lua_rawgeti(_L, -1, state);        // [ SS | S ]
    _lua_getfield(_L, -1, "type");      // [ SS | S | type ]
    _assert(_lua_type(_L,-1) == _LUA_TSTRING);

    // state = FORTIFY
    if _strcmp("fortify", _lua_tostring(_L,-1)) == 0 then
        _lua_pop(_L, 3);                // [ ]
        var GameFortify fort with
            this.map = map;
            this.me  = me;
        end;
        await fort.ok;

    // state = ATTACK
    else/if _strcmp("attack", _lua_tostring(_L,-1)) == 0 then
        _lua_pop(_L, 3);                // [ ]
        var GameAttack att with
            this.map = map;
            this.me  = me;
        end;
        await att.ok;

    // ERROR
    else
        _lua_pop(_L, 3);                // [ ]
        _assert(0);
    end

    emit this.ok;
end

#ifdef __GAME_HUMAN_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    _luaL_loadfile(_L, "server.lua");  // [ f ]
    _lua_call(_L, 0, 0);               // [ ]

    do
        _luaL_loadfile(_L, "g1.lua");      // [ f ]
        _lua_call(_L, 0, 0);               // [ ]
        var Map map;
        do
            var GameHuman human with
                this.map = &map;
                this.me  = 1;
            end;
            await human.ok;
        end
        do
            var GameHuman human with
                this.map = &map;
                this.me  = 2;
            end;
            await human.ok;
        end
    end

    do
        _luaL_loadfile(_L, "g4.lua");      // [ f ]
        _lua_call(_L, 0, 0);               // [ ]
        var Map map;
        do
            var GameHuman human with
                this.map = &map;
                this.me  = 1;
            end;
            await human.ok;
        end
        do
            var GameHuman human with
                this.map = &map;
                this.me  = 2;
            end;
            await human.ok;
        end
    end

with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;

#endif
#endif
