#ifndef _GAME_HUMAN_CEU
#define _GAME_HUMAN_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "map.ceu"
#include "game-nav.ceu"
#include "game-fortify.ceu"
#include "game-attack.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

class GameHuman with
    var Map& map;
    var int  me    = 0;

    event void ok;
do
    _assert(_REN != null);

    _assert(this.me  != 0);

    // last "fortify" state
    var int state = [[ #STATES ]];
    [[
        assert(STATES[#STATES].type == 'fortify' or
               STATES[#STATES].type == 'attack')
    ]]

    // show next turn
    do
        var _char[15] str;
        _sprintf(str, " WEEK %d ", (state+1)/2);
        var _SDL_Texture* tex;
            finalize
                tex = _SDL_text2texture(_REN, _FONT_30, str,
                                        &_colors.black, _BGS[this.me]);
            with
                _SDL_DestroyTexture(tex);
            end
        var UITexture nxt with
            this.ren := _REN;
            this.tex := tex;
            this.bg_clr := _BGS[me];
            this.align_x = _UI_ALIGN_CENTER;
            this.align_y = _UI_ALIGN_MIDDLE;
        end;
        var _SDL_Rect r;
            r.x = _REN_W/2;
            r.y = _REN_H/2;
            r.w = _REN_W / 4;
            r.h = _REN_H / 4;
        call nxt.go(&r);
        await nxt.ok_clicked;
    end

    // show navigate => (fortify||attack)

    // avoid navigation for "0st" state
    if state > 1 then
        do GameNav with
            this.map = map;
            this.me  = me;
        end;
    end

    // current state type
    var bool fortify? = [[ STATES[@state].type == 'fortify' ]];
    var bool attack?  = [[ STATES[@state].type == 'attack'  ]];

    // state = FORTIFY
    if fortify? then
        do GameFortify with
            this.map = map;
            this.me  = me;
        end;

    // state = ATTACK
    else/if attack? then
        do GameAttack with
            this.map = map;
            this.me  = me;
        end;

    // ERROR
    else
        _assert(0);
    end

    emit this.ok;
end

#ifdef __GAME_HUMAN_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    do
        [[ dofile 'g1.lua' ]];
        var Map map with
            this.ren := _REN;
        end;
        do GameHuman with
            this.map = map;
            this.me  = 1;
        end;
        do GameHuman with
            this.map = map;
            this.me  = 2;
        end;
    end

    do
        [[ dofile 'g4.lua' ]];
        var Map map with
            this.ren := _REN;
        end;
        do GameHuman with
            this.map = map;
            this.me  = 1;
        end;
        do GameHuman with
            this.map = map;
            this.me  = 2;
        end;
    end

with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
