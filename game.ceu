#ifndef _GAME_CEU
#define _GAME_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "map.ceu"
#include "game-human.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;
input void SDL_MOUSEBUTTONDOWN;

class Game with
    var _char* file = null;
do
    _assert(_REN != null);
    _assert(_L   != null);

    _assert(this.file != null);
        _assert(_luaL_dofile(_L, this.file) == 0);

    var Map map;
    var MapFinger fgr with
        this.map = &map;
    end;

    // while not finished

    loop do

        // current #states
        _lua_getglobal(_L, "STATES");       // [ SS ]
        var int ns = _lua_objlen(_L, -1);
        _lua_pop(_L, 1);                    // [ ]

        // foreach player
        loop p_, 6 do
            var int p = p_ + 1;     // C => Lua

            // none, AI or human?
            _lua_getglobal(_L, "PLAYERS");  // [ PP ]
            _lua_rawgeti(_L, -1, p);        // [ PP | tp ]

            // NONE
            if _lua_toboolean(_L, -1) == 0 then
                _lua_pop(_L, 2);                    // [ ]

                // SRV_move(p, {});
                _lua_getglobal(_L, "SRV_move");     // [ srv ]
                _lua_pushnumber(_L, p);             // [ srv | p ]
                _lua_newtable(_L);                  // [ srv | {} ]
                _lua_call(_L, 2, 0);

            else
                _assert(_lua_type(_L,-1) == _LUA_TSTRING);

                // AI
                if _strcmp("ai", _lua_tostring(_L,-1)) == 0 then
                    _lua_pop(_L, 2);                // [ ]

                    // MSp = AI_move(s,p);
                    // SRV_move(p, MSp);
                    _lua_getglobal(_L, "SRV_move"); // [ srv ]
                    _lua_pushnumber(_L, p);         // [ srv | p ]
                    _lua_getglobal(_L, "AI_move");  // [ srv | p | ai ]
                    _lua_pushnumber(_L, ns);        // [ srv | p | ai | s ]
                    _lua_pushnumber(_L, p);         // [ srv | p | ai | s | p ]
                    _lua_call(_L, 2, 1);            // [ srv | p | MSp ]
                    _lua_call(_L, 2, 0);            // [ ]

                // HUMAN
                else
                    _lua_pop(_L, 2);                // [ ]
                    var GameHuman human with
                        this.map = &map;
                        this.me  = p;
                    end;
                    await human.ok;
                end
            end
        end

        // next turn
        _lua_getglobal(_L, "SRV_go");   // [ srv ]
        _lua_call(_L, 0, 0);            // [ ]
    end
end

#ifdef __GAME_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with

#ifdef __ANDROID__
#define LUA_GAME \
    "/data/data/org.droid_in_the_sky.global_wars/lib/lib_lua__g.so"
#else
#define LUA_GAME   "_g1.lua"
#endif

    var Game game with
        this.file = LUA_GAME;
    end;
    await FOREVER;
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;

#endif
#endif
