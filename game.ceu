#ifndef _GAME_CEU
#define _GAME_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "map.ceu"
#include "game-human.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;
input void SDL_MOUSEBUTTONDOWN;

class Game with
    var _char* file = null;
do
    _assert(_REN != null);
    _assert(_L   != null);

    _assert(this.file != null);
        var int i = _luaL_loadfile(_L, this.file);  // [ f ]
        _lua_call(_L, 0, 0);            // [ ]

    var Map map;
    var MapFinger fgr with
        this.map = &map;
    end;

    // n players
    var int ps;
        _lua_getglobal(_L, "PLAYERS");  // [ PP ]
        ps = _lua_objlen(_L, -1);
        _lua_pop(_L, 1);                // [ ]

    // while not finished

    loop do

        // current #states
        _lua_getglobal(_L, "STATES");       // [ SS ]
        var int ns = _lua_objlen(_L, -1);
        _lua_pop(_L, 1);                    // [ ]

        // foreach player
        loop p_, ps do
            var int p = p_ + 1;     // C => Lua

            // AI or human?
            _lua_getglobal(_L, "PLAYERS");  // [ PP ]
            _lua_rawgeti(_L, -1, p);        // [ PP | P ]
            _lua_getfield(_L, -1, "type");  // [ PP | P | tp ]
            _assert(_lua_type(_L,-1) == _LUA_TSTRING);

            // AI
            if _strcmp("ai", _lua_tostring(_L,-1)) == 0 then
                _lua_pop(_L, 3);            // [ ]

                // MSp = AI_move(s,p);
                // SRV_move(p, MSp);
                _lua_getglobal(_L, "SRV_move"); // [ srv ]
                _lua_pushnumber(_L, p);         // [ srv | p ]
                _lua_getglobal(_L, "AI_move");  // [ srv | p | ai ]
                _lua_pushnumber(_L, ns);        // [ srv | p | ai | s ]
                _lua_pushnumber(_L, p);         // [ srv | p | ai | s | p ]
                _lua_call(_L, 2, 1);            // [ srv | p | MSp ]
                _lua_call(_L, 2, 0);            // [ ]

            // HUMAN
            else
                _lua_pop(_L, 3);            // [ ]
                var GameHuman human with
                    this.map = &map;
                    this.me  = p;
                end;
                await human.ok;
            end
        end

        // next turn
        _lua_getglobal(_L, "SRV_go");   // [ srv ]
        _lua_call(_L, 0, 0);            // [ ]
    end
end

#ifdef __GAME_CEU

native do
    lua_State*    L   = NULL;
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end

// SCREEN
    var _SDL_Window* win;
        finalize
            win = _SDL_CreateWindow("Game",
                                500, 400, 800, 480, _SDL_WINDOW_SHOWN);
        with
            _SDL_DestroyWindow(win);
        end
    _SDL_GetWindowSize(win, &_REN_W, &_REN_H);

    _REN = _SDL_CreateRenderer(win, -1, 0);
    finalize with
        _SDL_DestroyRenderer(_REN);
    end

// LUA
    _L = _luaL_newstate();
    finalize with
        _lua_close(_L);
    end
    _lua_atpanic(_L, _ceu_lua_atpanic);
    _luaL_openlibs(_L);

#ifdef __ANDROID__
    _lua_pushboolean(_L, 1);           // [ 1 ]
#else
    _lua_pushboolean(_L, 0);           // [ 0 ]
#endif
    _lua_setglobal(_L, "__ANDROID__"); // [ ]

// FONT
    native do
        TTF_Font* FONT;
    end
    _TTF_Init();
        finalize with
            _TTF_Quit();
        end
    _FONT = _TTF_OpenFont("fnts/Deutsch.ttf", 20);
        finalize with
            _TTF_CloseFont(_FONT);
        end
    _assert(_FONT != null);

// TEXS
    native do
        SDL_Texture* TEX_L  = NULL;
        SDL_Texture* TEX_R  = NULL;
        SDL_Texture* TEX_NO = NULL;
        SDL_Texture* TEX_OK = NULL;
    end
    _TEX_L = _IMG_LoadTexture(_REN, "imgs/left.png");
    finalize with
        _SDL_DestroyTexture(_TEX_L);
    end
    _TEX_R = _IMG_LoadTexture(_REN, "imgs/right.png");
    finalize with
        _SDL_DestroyTexture(_TEX_R);
    end
    _TEX_NO = _IMG_LoadTexture(_REN, "imgs/no.png");
    finalize with
        _SDL_DestroyTexture(_TEX_NO);
    end
    _TEX_OK = _IMG_LoadTexture(_REN, "imgs/ok.png");
    finalize with
        _SDL_DestroyTexture(_TEX_OK);
    end
    _assert(_TEX_L  != null);
    _assert(_TEX_R  != null);
    _assert(_TEX_NO != null);
    _assert(_TEX_OK != null);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with

#ifdef __ANDROID__
#define LUA_SERVER \
    "/data/data/org.droid_in_the_sky.global_wars/lib/lib_lua_server.so"
#define LUA_AI \
    "/data/data/org.droid_in_the_sky.global_wars/lib/lib_lua_ai.so"
#define LUA_GAME \
    "/data/data/org.droid_in_the_sky.global_wars/lib/lib_lua__g.so"
#else
#define LUA_SERVER "server.lua"
#define LUA_AI     "ai.lua"
#define LUA_GAME   "_g.lua"
#endif

    _luaL_loadfile(_L, LUA_SERVER);    // [ f ]
    _lua_call(_L, 0, 0);               // [ ]
    _luaL_loadfile(_L, LUA_AI);        // [ f ]
    _lua_call(_L, 0, 0);               // [ ]

    var Game game with
        this.file = LUA_GAME;
    end;
    await FOREVER;
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;

#endif
#endif
