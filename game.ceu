import lua.ceu;
import sdl.ceu;
import sdl-gfx.ceu;

import ui.ceu;
import map.ceu;
import game-state.ceu;
import game-move.ceu;

input void SDL_REDRAW;
input void SDL_KEYDOWN;
input void SDL_MOUSEBUTTONDOWN;

class Game with
    var _char* file = null;
do
    _assert(_REN != null);
    _assert(_L   != null);

    _assert(this.file != null);
        _luaL_loadfile(_L, this.file);
        _lua_call(_L, 0, 0);

    var Map map;

    _lua_getglobal(_L, "STATES");      // [ SS ]
    var int ns = _lua_objlen(_L, -1);
    _lua_pop(_L, 1);                   // [ ]

    _lua_getglobal(_L, "MOVES");       // [ MM ]
    var int nm = _lua_objlen(_L, -1);
    _lua_pop(_L, 1);                   // [ ]

    var GameState state with
        this.map   = &map;
        this.state = ns;    // start from last
    end;

    await SDL_KEYDOWN;

    loop do
        var GameState state with
            this.map   = &map;
            this.state = 1;
        end;

        await SDL_KEYDOWN;

        loop m_, nm do
            var int m = m_ + 1;
//_printf("> m %d\n", m);
            do
                var GameMove move with
                    this.map  = &map;
                    this.move = m;
                end;

                state.state = state.state + 1;
                await SDL_KEYDOWN;
            end
//_printf("< m %d\n", m);

            state.state = state.state + 1;
//_printf("> s %d\n", state.state);
            await SDL_KEYDOWN;
        end
    end
end

/*
native do
    lua_State*    L   = NULL;
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end
*/

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("Game",
                            500, 400, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end
_SDL_GetWindowSize(win, &_REN_W, &_REN_H);

_REN = _SDL_CreateRenderer(win, -1, 0);
finalize with
    _SDL_DestroyRenderer(_REN);
end

_L = _luaL_newstate();
finalize with
    _lua_close(_L);
end
_lua_atpanic(_L, _ceu_lua_atpanic);
_luaL_openlibs(_L);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    loop do
        do
            var Game game with
                this.file = "g1.lua";
            end;
            await SDL_MOUSEBUTTONDOWN;
        end
        do
            var Game game with
                this.file = "g2.lua";
            end;
            await SDL_MOUSEBUTTONDOWN;
        end
        do
            var Game game with
                this.file = "g3.lua";
            end;
            await SDL_MOUSEBUTTONDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end
_printf("ff\n");

return 0;
