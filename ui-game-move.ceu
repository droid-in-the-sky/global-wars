import lua.ceu;
import sdl.ceu;
import sdl-gfx.ceu;

import ui.ceu;
import ui-map.ceu;

input void SDL_REDRAW;
input void SDL_KEYDOWN;

class UIGameMove with
    var int move = 0;
    var UIMap* map = null;
do
    _assert(_REN != null);
    _assert(_L   != null);

    _assert(this.map  != null);
    _assert(this.move != 0);

    every SDL_REDRAW do
        _lua_getglobal(_L, "PLAYERS");      // [ PP ]
        _lua_getglobal(_L, "MOVES");        // [ PP | MM ]
        _lua_rawgeti(_L, -1, this.move);    // [ PP | MM | Mm ]

        // foreach player p
        loop p_, _lua_objlen(_L,1) do
            var int p = p_ + 1;

            // player r,g,b
            _lua_rawgeti(_L, 1, p);         // [ PP | MM | Mm | P ]
            _lua_getfield(_L, -1, "color"); // [ PP | MM | Mm | P | clr ]
            _lua_rawgeti(_L, -1, 1);        // [ PP | MM | Mm | P | clr | r ]
            _lua_rawgeti(_L, -2, 2);        // [ PP | MM | Mm | P | clr | r | g ]
            _lua_rawgeti(_L, -3, 3);        // [ PP | MM | Mm | P | clr | r | g | b ]
            var int r = _lua_tointeger(_L, -3);
            var int g = _lua_tointeger(_L, -2);
            var int b = _lua_tointeger(_L, -1);
            _lua_pop(_L, 5);                // [ PP | MM | Mm ]

            // foreach move "i" in "Mm" from player "p"
            _lua_rawgeti(_L, -1, p);        // [ PP | MM | Mm | Mmp ]
            loop i_, _lua_objlen(_L,-1) do
                var int i = i_ + 1;
                _lua_rawgeti(_L, -1, i);    // [ PP | MM | Mm | Mmp | T ]

                // get a=#armies, fr=from, to=to
                _lua_rawgeti(_L, -1, 1);    // [ PP | MM | Mm | Mmp | T | a ]
                _lua_rawgeti(_L, -2, 2);    // [ PP | MM | Mm | Mmp | T | a | fr ]
                _lua_rawgeti(_L, -3, 3);    // [ PP | MM | Mm | Mmp | T | a | fr | to ]
                var int a  = _lua_tointeger(_L, -3);
                var int fr = _lua_tointeger(_L, -2);
                var int to = _lua_tointeger(_L, -1);
                _lua_pop(_L, 4);            // [ PP | MM | Mm | Mmp ]

                // draw move (number of armies)
                var _char[10] str;
                _sprintf(str, "%d", a);

                var int x, y;           // army
                var int x1,y1, x2,y2;   // arrow

                // fortify
                if fr == 0 then
                    x = map:cx[to] - 40;    // TODO: hardcoded
                    y = map:cy[to] - 40;    // TODO: hardcoded

                    // arrow
                    x1 = x;
                    x2 = x;
                    y1 = y + 12;
                    y2 = y + 25;

                // move
                else
                    var int dx = map:cx[to] - map:cx[fr];
                    var int dy = map:cy[to] - map:cy[fr];
                    x = dx/2 + map:cx[fr];
                    y = dy/2 + map:cy[fr];

                    // apply offsets to avoid superposition
                    var int s;
                    var int* p;
                    if _abs(dx) > _abs(dy) then
                        p = &y;
                    else
                        p = &x;
                    end
                    if fr > to then
                        s = 1;
                    else
                        s = -1;
                    end
                    *p = *p + s*15;     // TODO: harcoded

                    // arrow
                    x2 = x + (map:cx[to] - x)/2;
                    x1 = x + (x2 - x)/2;
                    y2 = y + (map:cy[to] - y)/2;
                    y1 = y + (y2 - y)/2;
                end

                _thickLineRGBA(_REN, x1,y1, x2,y2, 1, 0,0,0, 0xAA);
                _boxRGBA(_REN,
                         x-10, y-10,    // TODO: hardcoded
                         x+10, y+10,    // TODO: hardcoded
                         r,g,b, 0xAA);
                _stringRGBA(_REN, x, y, str, 0,0,0, 0xAA);
            end
        _lua_pop(_L, 1);                    // [ PP | MM | Mm | Mmp ]
        end

        _lua_pop(_L, 3);                    // [ ]
    end
end

/*
native do
    lua_State*    L   = NULL;
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end
*/

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("UI Game Move",
                            500, 400, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end
_SDL_GetWindowSize(win, &_REN_W, &_REN_H);

_REN = _SDL_CreateRenderer(win, -1, 0);
finalize with
    _SDL_DestroyRenderer(_REN);
end

_L = _luaL_newstate();
finalize with
    _lua_close(_L);
end
_lua_atpanic(_L, _ceu_lua_atpanic);
_luaL_openlibs(_L);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    _luaL_loadfile(_L, "g1.lua");
    _lua_call(_L, 0, 0);
    _lua_getglobal(_L, "MOVES");   // [ MM ]
    var int len = _lua_objlen(_L, -1);
    _lua_pop(_L, 1);               // [ ]

    var UIMap map;

    loop do
        loop i, len do
            var UIGameMove m with
                this.map  = &map;
                this.move = i+1;
            end;
            await SDL_KEYDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;
