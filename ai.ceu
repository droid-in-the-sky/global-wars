import lua.ceu;
import sdl.ceu;
import sdl-gfx.ceu;

import ui.ceu;
import map.ceu;
import game-nav.ceu;

input void SDL_REDRAW;
input void SDL_MOUSEBUTTONDOWN;

/*
native do
    lua_State*    L   = NULL;
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end
*/

// SCREEN
    var _SDL_Window* win;
        finalize
            win = _SDL_CreateWindow("AI",
                                500, 400, 800, 480, _SDL_WINDOW_SHOWN);
        with
            _SDL_DestroyWindow(win);
        end
    _SDL_GetWindowSize(win, &_REN_W, &_REN_H);
    _REN = _SDL_CreateRenderer(win, -1, 0);
    finalize with
        _SDL_DestroyRenderer(_REN);
    end

// LUA
    _L = _luaL_newstate();
    finalize with
        _lua_close(_L);
    end
    _lua_atpanic(_L, _ceu_lua_atpanic);
    _luaL_openlibs(_L);

// FONT
    native do
        TTF_Font* FONT;
    end
    _TTF_Init();
        finalize with
            _TTF_Quit();
        end
    _FONT = _TTF_OpenFont("fnts/Deutsch.ttf", 20);
        finalize with
            _TTF_CloseFont(_FONT);
        end
    _assert(_FONT != null);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    await SDL_MOUSEBUTTONDOWN;

    _luaL_loadfile(_L, "server.lua");  // [ f ]
    _lua_call(_L, 0, 0);               // [ ]

    _luaL_loadfile(_L, "ai.lua");      // [ f ]
    _lua_call(_L, 0, 0);               // [ ]

    native nohold _AI_move();
    native do
        void AI_move (int s, int p) {
            lua_getglobal(L, "SRV_move");    // [ srv ]
            lua_pushnumber(L, p);            // [ srv | p ]
            lua_getglobal(L, "AI_move");     // [ srv | p | ai ]
            lua_pushnumber(L, s);            // [ srv | p | ai | s ]
            lua_pushnumber(L, p);            // [ srv | p | ai | s | p ]
            lua_call(L, 2, 1);               // [ srv | p | MSp ]
            lua_call(L, 2, 0);               // [ ]
        }
    end

// G2
    _luaL_loadfile(_L, "g2.lua");           // [ f ]
    _lua_call(_L, 0, 0);                    // [ ]

    loop do
        _lua_getglobal(_L, "STATES");       // [ SS ]
        var int s = _lua_objlen(_L, -1);
        _lua_pop(_L, 1);                    // [ ]

        _AI_move(s, 1);
        _AI_move(s, 2);
        _lua_getglobal(_L, "SRV_go");       // [ f ]
        _lua_call(_L, 0, 0);                // [ ]

        // server save (assumes all moved)
        _lua_getglobal(_L, "SRV_save");     // [ f ]
        _lua_pushstring(_L, "_g2.lua");     // [ f | "g" ]
        _lua_call(_L, 1, 0);                // [ ]

        var Map map;

        var GameNav nav with
            this.map = &map;
            this.me  = 1;
        end;

        await nav.ok;
    end

// G3
    _luaL_loadfile(_L, "g3.lua");      // [ f ]
    _lua_call(_L, 0, 0);               // [ ]

    loop do
        _lua_getglobal(_L, "STATES");      // [ SS ]
        var int s = _lua_objlen(_L, -1);
        _lua_pop(_L, 1);                   // [ ]

        _AI_move(s, 1);
        _AI_move(s, 2);
        _AI_move(s, 3);
        _lua_getglobal(_L, "SRV_go");       // [ f ]
        _lua_call(_L, 0, 0);                // [ ]

        // server save (assumes all moved)
        _lua_getglobal(_L, "SRV_save");    // [ f ]
        _lua_pushstring(_L, "_g3.lua");    // [ f | "g" ]
        _lua_call(_L, 1, 0);               // [ ]

        var Map map;

        var GameNav nav with
            this.map = &map;
            this.me  = 1;
        end;

        await nav.ok;
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;
