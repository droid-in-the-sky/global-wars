import lua.ceu;
import sdl.ceu;
import sdl-gfx.ceu;

import ui.ceu;
import ui-map.ceu;
import ui-game-state.ceu;
import ui-game-move.ceu;

input void SDL_REDRAW;
input void SDL_KEYDOWN;

class UIGame with
    interface UI;

    var _SDL_Renderer* ren = null;
    var _lua_State*    lua = null;

    var UIMap* map  = null;
    var _char* file = null;
do
    _assert(this.map  != null);
    _assert(this.file != null);

    _assert(this.lua != null);
        _luaL_loadfile(lua, this.file);
        _lua_call(lua, 0, 0);

    var _SDL_Rect* r = await go_redim;
    _assert(this.ren != null);

    _lua_getglobal(lua, "MOVES");       // [ MM ]
    var int n = _lua_objlen(lua, -1);
    _lua_pop(lua, 1);                   // [ ]

    loop do
        var UIGameState state with
            this.ren   = ren;
            this.lua   = lua;
            this.map   = map;
            this.state = 1;
        end;
        emit state.go_redim => null;

        await SDL_KEYDOWN;

        loop m_, n do
            var int m = m_ + 1;
            do
                var UIGameMove move with
                    this.ren  = ren;
                    this.lua  = lua;
                    this.map  = map;
                    this.move = m;
                end;
                emit move.go_redim => null;

                state.state = state.state + 1;
                await SDL_KEYDOWN;
            end

            state.state = state.state + 1;
            await SDL_KEYDOWN;
        end
    end
end

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("UI Game",
                            500, 400, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

var int ren_w;
var int ren_h;
    _SDL_GetWindowSize(win, &ren_w, &ren_h);

var _SDL_Renderer* ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end

var _lua_State* lua;
    finalize
        lua = _luaL_newstate();
    with
        _lua_close(lua);
    end
    _lua_atpanic(lua, _ceu_lua_atpanic);
    _luaL_openlibs(lua);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(ren, 0,0, ren_w,ren_h, 0,0,0, 0xFF);
    end
with
    var UIMap map with
        this.ren   = ren;
        this.ren_w = ren_w;
        this.ren_h = ren_h;
        this.lua   = lua;
    end;
    emit map.go_redim => null;

    var UIGame game with
        this.ren  = ren;
        this.lua  = lua;
        this.map  = &map;
        this.file = "game.lua";
    end;
    emit game.go_redim => null;

    await FOREVER;
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
end

return 0;
