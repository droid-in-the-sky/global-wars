import lua.ceu;
import sdl.ceu;
import sdl-gfx.ceu;

import ui.ceu;
import ui-map.ceu;

input void SDL_REDRAW;

class UIGame with
    interface UI;

    var _SDL_Renderer* ren = null;
    var _lua_State*    lua = null;

    var UIMap* map  = null;
    var _char* file = null;
do
    _assert(this.map  != null);
    _assert(this.file != null);

    _assert(this.lua != null);
        _luaL_loadfile(lua, this.file);
        _lua_call(lua, 0, 0);

    var _SDL_Rect* r = await go_redim;
    _assert(this.ren != null);

    every SDL_REDRAW do
        _lua_getglobal(lua, "PLAYERS");     // [ PS ]

        // foreach player i
        loop i_, _lua_objlen(lua,-1) do
            var int i = i_ + 1;
            _lua_rawgeti(lua, -1, i);       // [ PS | P ]

            // r,g,b
            _lua_getfield(lua, -1, "color"); // [ PS | P | clr ]
            _lua_rawgeti(lua, -1, 1);        // [ PS | P | clr | r ]
            _lua_rawgeti(lua, -2, 2);        // [ PS | P | clr | r | g ]
            _lua_rawgeti(lua, -3, 3);        // [ PS | P | clr | r | g | b ]
            var int r = _lua_tointeger(lua, -3);
            var int g = _lua_tointeger(lua, -2);
            var int b = _lua_tointeger(lua, -1);
            _lua_pop(lua, 4);

            // foreach country c
            loop c_, _lua_objlen(lua,-1) do
                var int c = c_ + 1;
                _lua_rawgeti(lua, -1, c);   // [ PS | P | n ]
                var int n = _lua_tointeger(lua, -1);    // # armies
                _lua_pop(lua, 1);           // [ PS | P ]

                if n > 0 then
                    var _char[10] str;
                    _sprintf(str, "%d", n);
                    _boxRGBA(ren,
                             map:cx[c]-10, map:cy[c]-10,
                             map:cx[c]+10, map:cy[c]+10,
                             r,g,b, 0xFF);
                    _stringRGBA(ren, map:cx[c], map:cy[c], str, 0,0,0, 0xFF);
                end
            end

            _lua_pop(lua, 1);               // [ PS ]
        end

        _lua_pop(lua, 1);                   // [ ]
    end
end

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("UI Game",
                            500, 400, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

var int ren_w;
var int ren_h;
    _SDL_GetWindowSize(win, &ren_w, &ren_h);

var _SDL_Renderer* ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end

var _lua_State* lua;
    finalize
        lua = _luaL_newstate();
    with
        _lua_close(lua);
    end
    _lua_atpanic(lua, _ceu_lua_atpanic);
    _luaL_openlibs(lua);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(ren, 0,0, ren_w,ren_h, 0,0,0, 0xFF);
    end
with
    var UIMap map with
        this.ren   = ren;
        this.ren_w = ren_w;
        this.ren_h = ren_h;
        this.lua   = lua;
    end;
    emit map.go_redim => null;

    do
        var UIGame game with
            this.ren  = ren;
            this.lua  = lua;
            this.map  = &map;
            this.file = "game1.lua";
        end;
        emit game.go_redim => null;
        await 2s;
    end
    do
        var UIGame game with
            this.ren  = ren;
            this.lua  = lua;
            this.map  = &map;
            this.file = "game2.lua";
        end;
        emit game.go_redim => null;
        await 2s;
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
end

return 0;
