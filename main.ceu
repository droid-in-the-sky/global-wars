#include "sdl.ceu"
#include "sdl-gfx.ceu"
#include "menu-games.ceu"
#include "game.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;

native do
    lua_State*    L   = NULL;
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end

// SCREEN
    var _SDL_Window* win;
        finalize
            win = _SDL_CreateWindow("World Wars",
                                500, 400, 800, 480, _SDL_WINDOW_SHOWN);
        with
            _SDL_DestroyWindow(win);
        end
    _SDL_GetWindowSize(win, &_REN_W, &_REN_H);

    _REN = _SDL_CreateRenderer(win, -1, 0);
    finalize with
        _SDL_DestroyRenderer(_REN);
    end

// LUA
    _L = _luaL_newstate();
    finalize with
        _lua_close(_L);
    end
    _lua_atpanic(_L, _ceu_lua_atpanic);
    _luaL_openlibs(_L);

// FONT
    native do
        TTF_Font* FONT;
    end
    _TTF_Init();
        finalize with
            _TTF_Quit();
        end
    _FONT = _TTF_OpenFont("fnts/Deutsch.ttf", 20);
        finalize with
            _TTF_CloseFont(_FONT);
        end
    _assert(_FONT != null);

// TEXS
    native do
        SDL_Texture* TEX_L  = NULL;
        SDL_Texture* TEX_R  = NULL;
        SDL_Texture* TEX_RM = NULL;
        SDL_Texture* TEX_NO = NULL;
        SDL_Texture* TEX_OK = NULL;
    end
    _TEX_L = _IMG_LoadTexture(_REN, "imgs/left.png");
    finalize with
        _SDL_DestroyTexture(_TEX_L);
    end
    _TEX_R = _IMG_LoadTexture(_REN, "imgs/right.png");
    finalize with
        _SDL_DestroyTexture(_TEX_R);
    end
    _TEX_RM = _IMG_LoadTexture(_REN, "imgs/rm.png");
    finalize with
        _SDL_DestroyTexture(_TEX_RM);
    end
    _TEX_NO = _IMG_LoadTexture(_REN, "imgs/no.png");
    finalize with
        _SDL_DestroyTexture(_TEX_NO);
    end
    _TEX_OK = _IMG_LoadTexture(_REN, "imgs/ok.png");
    finalize with
        _SDL_DestroyTexture(_TEX_OK);
    end
    _assert(_TEX_L  != null);
    _assert(_TEX_R  != null);
    _assert(_TEX_RM != null);
    _assert(_TEX_NO != null);
    _assert(_TEX_OK != null);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with

    _luaL_loadfile(_L, "server.lua");   // [ f ]
    _lua_call(_L, 0, 0);                // [ ]
    _luaL_loadfile(_L, "ai.lua");       // [ f ]
    _lua_call(_L, 0, 0);                // [ ]

    _luaL_loadfile(_L, "main.lua");     // [ f ]
    _lua_call(_L, 0, 0);                // [ ]

    var int n;
    do
        var MenuGames menu;
        n = await menu.ok_go;
    end

    do
        _lua_getglobal(_L, "GAMES");    // [ GG ]
        _lua_rawgeti(_L, -1, n);        // [ GG | file ]
        var Game game with
            this.file := _lua_tostring(_L, -1);
                        // not held
        end;
        _lua_pop(_L, 2);                // [ ]
        await FOREVER;
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;
