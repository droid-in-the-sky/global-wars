#ifndef _GAME_MOVE_CEU
#define _GAME_MOVE_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui.ceu"
#include "map.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

class GameMove with
    var Map* map = null;
    var int  idx = 0;
do
    _assert(_REN != null);
    _assert(_L   != null);

    _assert(this.map != null);
    _assert(this.idx != 0);

    every SDL_REDRAW do
        _lua_getglobal(_L, "PLAYERS");      // [ PP ]
        _lua_getglobal(_L, "MOVES");        // [ PP | MM ]
        _lua_rawgeti(_L, -1, this.idx);     // [ PP | MM | Mm ]

        // foreach player p
        loop p_, _lua_objlen(_L,1) do
            var int p = p_ + 1;

            // player r,g,b
            _lua_rawgeti(_L, 1, p);         // [ PP | MM | Mm | P ]
            _lua_getfield(_L, -1, "color"); // [ PP | MM | Mm | P | clr ]
            _lua_rawgeti(_L, -1, 1);        // [ PP | MM | Mm | P | clr | r ]
            _lua_rawgeti(_L, -2, 2);        // [ PP | MM | Mm | P | clr | r | g ]
            _lua_rawgeti(_L, -3, 3);        // [ PP | MM | Mm | P | clr | r | g | b ]
            var int r = _lua_tointeger(_L, -3);
            var int g = _lua_tointeger(_L, -2);
            var int b = _lua_tointeger(_L, -1);
            _lua_pop(_L, 5);                // [ PP | MM | Mm ]

            // foreach move "i" in "Mm" from player "p"
            _lua_rawgeti(_L, -1, p);        // [ PP | MM | Mm | Mmp ]
            loop i_, _lua_objlen(_L,-1) do
                var int i = i_ + 1;
                _lua_rawgeti(_L, -1, i);    // [ PP | MM | Mm | Mmp | T ]

                // get a=#armies, fr=from, to=to
                _lua_rawgeti(_L, -1, 1);    // [ PP | MM | Mm | Mmp | T | a ]
                _lua_rawgeti(_L, -2, 2);    // [ PP | MM | Mm | Mmp | T | a | fr ]
                _lua_rawgeti(_L, -3, 3);    // [ PP | MM | Mm | Mmp | T | a | fr | to ]
                var int a  = _lua_tointeger(_L, -3);
                var int fr = _lua_tointeger(_L, -2);
                var int to = _lua_tointeger(_L, -1);
                _lua_pop(_L, 4);            // [ PP | MM | Mm | Mmp ]

                if a == 0 then
                    continue;   // don't show this move
                end

                // draw move (number of armies)
                var _char[10] str;
                _sprintf(str, "%d", a);

                var int x, y;    // army

                // fortify arrow
               if fr == 0 then
                    x = map:cx[to] - 20;    // TODO: hardcoded
                    y = map:cy[to] - 40;    // TODO: hardcoded
                    _thickLineRGBA(_REN,
                        map:cx[to] - 20,
                        map:cy[to] - 40,    // TODO: hardcoded
                        map:cx[to],
                        map:cy[to],
                        1, 0,0,0, 0xAA);

                // move arrow
                else
                    var int dx = map:cx[to] - map:cx[fr];
                    var int dy = map:cy[to] - map:cy[fr];
                    x = map:cx[fr] + dx/2 - dy/4;
                    y = map:cy[fr] + dy/2 - dx/4;

                    var u16[3] xs;
                        xs[0] = map:cx[to];
                        xs[1] = x;
                        xs[2] = map:cx[fr];
                    var u16[3] ys;
                        ys[0] = map:cy[to];
                        ys[1] = y;
                        ys[2] = map:cy[fr];
                    _bezierRGBA(_REN, xs,ys, 3, 2, 0,0,0, 0xAA);
                end

                // army
                _boxRGBA(_REN,
                         x-10, y-10,    // TODO: hardcoded
                         x+10, y+10,    // TODO: hardcoded
                         r,g,b, 0xAA);
                _stringRGBA(_REN, x, y, str, 0,0,0, 0xAA);
            end
            _lua_pop(_L, 1);                    // [ PP | MM | Mm ]
        end

        _lua_pop(_L, 3);                    // [ ]
    end
end

/* Test */

#ifdef __GAME_MOVE_CEU

native do
    lua_State*    L   = NULL;
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("Game Move",
                            500, 400, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end
_SDL_GetWindowSize(win, &_REN_W, &_REN_H);

_REN = _SDL_CreateRenderer(win, -1, 0);
finalize with
    _SDL_DestroyRenderer(_REN);
end

_L = _luaL_newstate();
finalize with
    _lua_close(_L);
end
_lua_atpanic(_L, _ceu_lua_atpanic);
_luaL_openlibs(_L);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxColor(_REN, 0,0, _REN_W,_REN_H, _colors.black);
    end
with
    _luaL_loadfile(_L, "g1.lua");
    _lua_call(_L, 0, 0);
    _lua_getglobal(_L, "MOVES");   // [ MM ]
    var int len = _lua_objlen(_L, -1);
    _lua_pop(_L, 1);               // [ ]

    var Map map;

    loop do
        loop i, len do
            var GameMove m with
                this.map = &map;
                this.idx = i+1;
            end;
            await SDL_KEYDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;

#endif
#endif
