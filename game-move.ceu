#ifndef _GAME_MOVE_CEU
#define _GAME_MOVE_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui.ceu"
#include "map.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

class GameMove with
    var Map& map;
    var int  idx = 0;
do
    _assert(_REN != null);
    _assert(this.idx != 0);

    every SDL_REDRAW do
        // foreach player p
        var int n_players = [[ #PLAYERS ]];
        loop p_ in n_players do
            var int p = p_ + 1;

            var bool empty = [[ PLAYERS[@p]==false ]];
            if empty then
                continue;      // { p1, false, p2, false, ... }
            end

            [[ P = MOVES[@this.idx][@p] ]]

            // foreach move "i" in "Mm" from player "p"
            var int n_moves = [[ P and #P or 0 ]];
            loop i_ in n_moves do
                var int i = i_ + 1;

                // get a=#armies, fr=from, to=to
                var int a  = [[ P[@i][1] ]];
                var int fr = [[ P[@i][2] ]];
                var int to = [[ P[@i][3] ]];

                if a == 0 then
                    continue;   // don't show this move
                end

                // draw move (number of armies)
                var _char[10] str;
                _sprintf(str, "%d", a);

                var int x, y;    // army

                // fortify arrow
               if fr == 0 then
                    x = map.cx[to] - 20;    // TODO: hardcoded
                    y = map.cy[to] - 40;    // TODO: hardcoded
                    _thickLineRGBA(_REN,
                        map.cx[to] - 20,
                        map.cy[to] - 40,    // TODO: hardcoded
                        map.cx[to],
                        map.cy[to],
                        1, 0,0,0, 0xAA);

                // move arrow
                else
                    var int dx = map.cx[to] - map.cx[fr];
                    var int dy = map.cy[to] - map.cy[fr];
                    x = map.cx[fr] + dx/2 - dy/4;
                    y = map.cy[fr] + dy/2 - dx/4;

                    var u16[3] xs;
                        xs[0] = map.cx[to];
                        xs[1] = x;
                        xs[2] = map.cx[fr];
                    var u16[3] ys;
                        ys[0] = map.cy[to];
                        ys[1] = y;
                        ys[2] = map.cy[fr];
                    _bezierRGBA(_REN, xs,ys, 3, 2, 0,0,0, 0xAA);
                end

                // army
                var _SDL_Color bg = *_BGS[p];
                bg.a = 0xAA;
                _boxColor(_REN,
                         x-10, y-10,    // TODO: hardcoded
                         x+10, y+10,    // TODO: hardcoded
                         bg);
                _stringRGBA(_REN, x, y, str, 0,0,0, 0xAA);
            end
        end
    end
end

#ifdef __GAME_MOVE_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxColor(_REN, 0,0, _REN_W,_REN_H, _colors.black);
    end
with
    [[ dofile 'g1.lua' ]]
    var int len = [[ #MOVES ]];
    var Map map;

    loop do
        loop i in len do
            var GameMove m with
                _.map = map;
                _.idx = i+1;
            end;
            await SDL_KEYDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
