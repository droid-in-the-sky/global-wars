#ifndef _GAME_ATTACK_CEU
#define _GAME_ATTACK_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui-texture.ceu"
#include "ui-grid.ceu"
#include "map.ceu"
#include "game-state.ceu"
#include "game-move.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;
input void SDL_MOUSEBUTTONDOWN;

class GameAttackOne with
    var Map* map   = null;
    var int  ref   = _LUA_NOREF;
    var int  me    = 0;
    var int  state = 0;
    var int  fr    = 0;

    event (int,int) ok;
do
    _assert(this.map   != null);
    _assert(this.ref   != _LUA_NOREF);
    _assert(this.me    != 0);
    _assert(this.state != 0);

    // await "fr" click until "me" country

    var int max;    // holds the maximum transferable armies (#t-1)
    loop do
        if this.fr == 0 then
            this.fr = await map:ok_clicked;
        end
        _lua_getglobal(_L, "STATES");   // [ SS ]
        _lua_rawgeti(_L, -1, state+1);  // [ SS | S ]
        _lua_rawgeti(_L, -1, me);       // [ SS | S | Sp ]
        _lua_rawgeti(_L, -1, fr);       // [ SS | S | Sp | Spc ]
        max = _lua_tointeger(_L, -1) - 1;
        _lua_pop(_L, 4);
        if max > 0 then
            break;          // my country, a>1:   ok!
        else
            this.fr = 0;    // not enough armies: try again!
        end
    end

    par/or do
        every SDL_REDRAW do
            _boxColor(_REN,
                     map:cx[fr]-20, map:cy[fr]-20,
                     map:cx[fr]+20, map:cy[fr]+20,
                     _colors.white);
        end
    with
        // await click at "to" country
        var int to = await map:ok_clicked;

        // same: deselect
        if this.fr == to then
            emit this.ok => (0,0);

        // other: attack/move
        else
            // check borders
            _lua_getglobal(_L, "MAP");          // [ M ]
            _lua_getfield(_L, -1, "borders");   // [ M | BB ]
            _lua_rawgeti(_L, -1, fr);           // [ M | BB | B ]
            _lua_rawgeti(_L, -1, to);           // [ M | BB | B | b? ]
            var int border? = _lua_tonumber(_L, -1);
            _lua_pop(_L, 4);

            if not border? then
                emit this.ok => (0,fr);

            else
                // t <- c++
                _lua_getglobal(_L, "SRV_move_inc");
                                            // [ f ]
                _lua_rawgeti(_L, _LUA_REGISTRYINDEX, ref);
                                            // [ f | t ]
                _lua_pushnumber(_L, 1);     // [ f | t | 1 | c ];
                _lua_pushnumber(_L, fr);    // [ f | t | 1 | fr | to ];
                _lua_pushnumber(_L, to);    // [ f | t | 1 | fr | to ];
                _lua_call(_L, 4, 1);        // [ a ]
                var int a = _lua_tointeger(_L, -1);
                _lua_pop(_L, 1);            // [ ]

                if a == max then
                    emit this.ok => (1,0);      // no more armies from "fr"
                else
                    emit this.ok => (1,fr);     // "fr" can still move
                end
            end
        end
    end
end

class GameAttack with
    var Map* map = null;
    var int  me  = 0;
    event void ok;
do
    _assert(_REN  != null);
    _assert(_L    != null);
    _assert(_FONT != null);
    _assert(_BGS  != null);

    _assert(this.map != null);
    _assert(this.me  != 0);

    // last "attack" state
    var int state;
        _lua_getglobal(_L, "STATES");       // [ SS ]
        state = _lua_objlen(_L, -1);
        _lua_rawgeti(_L, -1, state);       // [ SS | S ]
        _lua_getfield(_L, -1, "type");     // [ SS | S | type ]
        _assert( _lua_type(_L,-1) == _LUA_TSTRING );
        _assert( _strcmp("attack", _lua_tostring(_L,-1)) == 0 );
        _lua_pop(_L, 3);                    // [ ]

    // GRID "all"
    var _SDL_Rect r;        // whole screen
        r.x = _REN_W / 2;
        r.y = _REN_H / 2;
        r.w = _REN_W;
        r.h = _REN_H;
    var UIGrid g1 with
        this.ren = _REN;
        this.lay_lins = 4;
        this.lay_cols = 4;
        this.lay = _GA_g1;
        this.uis_n = 2;
        native do
            int GA_g1[16] = {
                -1, -1, -1, -1,
                -1,  0,  0, -1,     // fs
                -1,  0,  0, -1,
                -1, -1, -1,  1      // menu
            };
        end
    end;

    // AWAIT center click
    do
        // show current state
        var GameState st with
            this.map = map;
            this.idx = state;    // start from last
        end;

        // text texture
        var _char[20] str;
        _sprintf(str, "%s", "Move & Attack");
        var _SDL_Texture* tex;
            finalize
                tex = _SDL_text2texture(_REN, _FONT, str,
                                        &_colors.black, _BGS[this.me]);

            with
                _SDL_DestroyTexture(tex);
            end
        var UITexture ui_fs with
            this.ren = _REN;
            this.tex = tex;
            this.bg_clr = _BGS[me];
        end;

        finalize
            g1.uis[0] = &ui_fs; // fs
        with
            g1.uis[0] = null;
        end
        g1.uis[1] = null;       // menu
        g1.go(&r);

        await 2s;
    end

    // GRID "menu"
    var UIGrid g2 with
        this.ren = _REN;
        this.bg_redim? = 1;
        this.lay_lins = 2;
        this.lay_cols = 3;
        this.lay = _GA_g2;
        this.uis_n = 2;
        native do
            int GA_g2[] = {
                -1, -1, -1,
                -1,  0,  1  // ok
            };
        end
    end;

    // ui_ok
    var UITexture ui_ok with
        this.ren = _REN;
        this.tex = _TEX_OK;
    end;

    g1.uis[0] = null;   // remove "fs"
    g1.uis[1] = &g2;    // include "menu"
        g2.uis[0] = null;   // no
        g2.uis[1] = &ui_ok; // ok
    g1.go(null);

    // "ref" holds the attacks table: { {a,fr,to}, ... }
    _lua_pushboolean(_L, 1);    // [ true ]
    var int ref = _luaL_ref(_L, _LUA_REGISTRYINDEX);
                                // [ ]
        finalize with
            _luaL_unref(_L, _LUA_REGISTRYINDEX, ref);
        end

    // loop until all "atts" are chosen
    //  - restart on "no"   (only after 1st att)
    //  - quit    on "ok"

    par/or do
        // button "OK": quit
        await ui_ok.ok_clicked;
    with
        loop do
            // emitted whenever "atts" changes to show "X"
            event void e;

            par/or do
                // button "NO": restart
                await e;
                var UITexture ui with
                    this.ren = _REN;
                    this.tex = _TEX_NO;
                end;
                finalize
                    g2.uis[0] = &ui;
                with
                    g2.uis[0] = null;
                end
                g1.go(null);
                await ui.ok_clicked;
            with

                // restart armies table
                _lua_newtable(_L);      // [ armies ]
                _lua_rawseti(_L, _LUA_REGISTRYINDEX, ref);

                // one loop foreach "attack"
                var int fr = 0;               // initially, no one is selected
                loop do
                    // new temporary state "attacking"
                    //      SRV_move_ins(armies)
                    _lua_getglobal(_L, "SRV_move_ins");     // [ f ]
                    _lua_pushnumber(_L, this.me);           // [ f | p ]
                    _lua_rawgeti(_L, _LUA_REGISTRYINDEX, ref);
                                                            // [ f | p | t ]
                    _lua_call(_L, 2, 0);                    // [ ]
                    finalize with
                        _lua_getglobal(_L, "SRV_move_rem"); // [ f ]
                        _lua_call(_L, 0, 0);                // [ ]
                    end

                    // show next state
                    var GameState st with
                        this.map = map;
                        this.idx = state+1;     // tmp state
                    end;

                    // show next move
                    var GameMove mv with
                        this.map = map;
                        this.idx = (state+1)/2; // tmp move
                    end;

                    var GameAttackOne one with
                        this.map   = map;
                        this.ref   = ref;
                        this.me    = me;
                        this.state = state;
                        this.fr    = fr;
                    end;

                    var int any?;
                    (any?, fr) = await one.ok; // keep "fr" as selected
                    if any? then
                        emit e;     // show "X" if any army was moved
                    end
                end
            end
        end
    end

    // new state "fortifying"
    _lua_getglobal(_L, "SRV_move");         // [ f ]
    _lua_pushnumber(_L, this.me);           // [ f | p ]
    _lua_rawgeti(_L, _LUA_REGISTRYINDEX, ref);
                                            // [ f | p | t ]
    _lua_call(_L, 2, 0);                    // [ ]

    emit this.ok;
end

#ifdef __GAME_ATTACK_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    loop do
        do
            _assert(_luaL_dofile(_L, "g4.lua") == 0);

            var Map map;

            var GameAttack att with
                this.map = &map;
                this.me  = 1;
            end;

            await att.ok;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
