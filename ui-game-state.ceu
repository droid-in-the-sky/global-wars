import lua.ceu;
import sdl.ceu;
import sdl-gfx.ceu;

import ui.ceu;
import ui-map.ceu;

input void SDL_REDRAW;
input void SDL_KEYDOWN;

class UIGameState with
    interface UI;

    var _SDL_Renderer* ren = null;
    var _lua_State*    lua = null;

    var int state = 0;

    var UIMap* map = null;
do
    _assert(this.map   != null);
    _assert(this.state != 0);

    var _SDL_Rect* r = await go_redim;
    _assert(this.ren != null);

    every SDL_REDRAW do
        _lua_getglobal(lua, "PLAYERS");      // [ PP ]
        _lua_getglobal(lua, "STATES");       // [ PP | SS ]
        _lua_rawgeti(lua, -1, this.state);   // [ PP | SS | Ss ]

        // foreach player p
        loop p_, _lua_objlen(lua,1) do
            var int p = p_ + 1;

            // player r,g,b
            _lua_rawgeti(lua, 1, p);         // [ PP | SS | Ss | P ]
            _lua_getfield(lua, -1, "color"); // [ PP | SS | Ss | P | clr ]
            _lua_rawgeti(lua, -1, 1);        // [ PP | SS | Ss | P | clr | r ]
            _lua_rawgeti(lua, -2, 2);        // [ PP | SS | Ss | P | clr | r | g ]
            _lua_rawgeti(lua, -3, 3);        // [ PP | SS | Ss | P | clr | r | g | b ]
            var int r = _lua_tointeger(lua, -3);
            var int g = _lua_tointeger(lua, -2);
            var int b = _lua_tointeger(lua, -1);
            _lua_pop(lua, 5);                // [ PP | SS | Ss ]

            _lua_rawgeti(lua, -1, p);        // [ PP | SS | Ss | Ssp ]

            // foreach country c
            loop c_, _lua_objlen(lua,-1) do
                var int c = c_ + 1;
                _lua_rawgeti(lua, -1, c);    // [ PP | SS | Ss | Ssp | n ]
                var int n = _lua_tointeger(lua, -1);    // # armies
                _lua_pop(lua, 1);            // [ PP | SS | Ss | Ssp ]

                if n > 0 then
                    var _char[10] str;
                    _sprintf(str, "%d", n);
                    _boxRGBA(ren,
                             map:cx[c]-10, map:cy[c]-10,
                             map:cx[c]+10, map:cy[c]+10,
                             r,g,b, 0xFF);
                    _stringRGBA(ren, map:cx[c], map:cy[c], str, 0,0,0, 0xFF);
                end
            end

            _lua_pop(lua, 1);                // [ PP | SS | Ss ]
        end

        _lua_pop(lua, 3);                    // [ ]
    end
end

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("UI Game State",
                            500, 400, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

native do
    int REN_W, REN_H;
end
_SDL_GetWindowSize(win, &_REN_W, &_REN_H);

var _SDL_Renderer* ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end

var _lua_State* lua;
    finalize
        lua = _luaL_newstate();
    with
        _lua_close(lua);
    end
    _lua_atpanic(lua, _ceu_lua_atpanic);
    _luaL_openlibs(lua);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(ren, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    _luaL_loadfile(lua, "g1.lua");
    _lua_call(lua, 0, 0);
    _lua_getglobal(lua, "STATES");  // [ SS ]
    var int len = _lua_objlen(lua, -1);
    _lua_pop(lua, 1);               // [ ]

    var UIMap map with
        this.ren = ren;
        this.lua = lua;
    end;
    emit map.go_redim => null;

    loop do
        loop i, len do
            var UIGameState s with
                this.ren   = ren;
                this.lua   = lua;
                this.map   = &map;
                this.state = i+1;
            end;
            emit s.go_redim => null;
            await SDL_KEYDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
end

return 0;
