#ifndef _GAME_STATE_CEU
#define _GAME_STATE_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui.ceu"
#include "map.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

class GameState with
    var Map* map = null;
    var int  idx = 0;       // TODO: change to "go"
do
    _assert(_REN != null);
    _assert(_L   != null);

    _assert(this.map != null);
    _assert(this.idx != 0);

    every SDL_REDRAW do
        _lua_getglobal(_L, "PLAYERS");      // [ PP ]
        _lua_getglobal(_L, "STATES");       // [ PP | SS ]
        _lua_rawgeti(_L, -1, this.idx);     // [ PP | SS | Ss ]

        var _char[20] title;
        _lua_getfield(_L, -1, "type");      // [ PP | SS | Ss | tp ]
        _sprintf(title, "[%d] %s", this.idx, _lua_tostring(_L,-1));
        _lua_pop(_L, 1);                    // [ PP | SS | Ss ]
        _stringColor(_REN, 10, 10, title, _colors.white);

        // foreach player p
        loop p_, _lua_objlen(_L,-3) do
            var int p = p_ + 1;

            _lua_rawgeti(_L, -1, p);        // [ PP | SS | Ss | Ssp ]

            // foreach country c
            loop c_, _lua_objlen(_L,-1) do
                var int c = c_ + 1;
                _lua_rawgeti(_L, -1, c);    // [ PP | SS | Ss | Ssp | n ]
                var int n = _lua_tointeger(_L, -1);    // # armies
                _lua_pop(_L, 1);            // [ PP | SS | Ss | Ssp ]

                if n > 0 then
                    var _char[10] str;
                    _sprintf(str, "%d", n);
                    _boxColor(_REN,
                             map:cx[c]-10, map:cy[c]-10,
                             map:cx[c]+10, map:cy[c]+10,
                             *_BGS[p]);
                    _stringColor(_REN, map:cx[c], map:cy[c], str,
                                _colors.black);
                end
            end

            _lua_pop(_L, 1);                // [ PP | SS | Ss ]
        end

        _lua_pop(_L, 3);                    // [ ]
    end
end

#ifdef __GAME_STATE_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxColor(_REN, 0,0, _REN_W,_REN_H, _colors.black);
    end
with
    _assert(_luaL_dofile(_L, "g1.lua") == 0);
    _lua_getglobal(_L, "STATES");  // [ SS ]
    var int len = _lua_objlen(_L, -1);
    _lua_pop(_L, 1);               // [ ]

    var Map map;

    loop do
        loop i, len do
            var GameState s with
                this.map = &map;
                this.idx = i+1;
            end;
            await SDL_KEYDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
