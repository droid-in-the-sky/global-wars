#ifndef _GAME_STATE_CEU
#define _GAME_STATE_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui.ceu"
#include "map.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

class GameState with
    var Map& map;
    var int  idx = 0;       // TODO: change to "go"
do
    _assert(_REN != null);
    _assert(this.idx != 0);

    every SDL_REDRAW do
        var _char[20] title;
        var char[20] title_ = [[ STATES[@this.idx].type ]];
        _sprintf(title, "[%d] %s", this.idx, title_);
        _stringColor(_REN, 10, 10, title, _colors.white);

        // foreach player p
        var int n_players = [[ #PLAYERS ]];
        loop p_ in n_players do
            var int p = p_ + 1;

            var bool empty = [[ PLAYERS[@p]==false ]];
            if empty then
                continue;      // { p1, false, p2, false, ... }
            end

            [[ P = STATES[@this.idx][@p] ]];

            // foreach country c
            var int n_countries = [[ #P ]];
            loop c_ in n_countries do
                var int c = c_ + 1;
                var int n = [[ P[@c] ]];    // number of armies in country @c
                if n > 0 then
                    var _char[10] str;
                    _sprintf(str, "%d", n);
                    _boxColor(_REN,
                             map.cx[c]-10, map.cy[c]-10,
                             map.cx[c]+10, map.cy[c]+10,
                             *_BGS[p]);
                    _stringColor(_REN, map.cx[c], map.cy[c], str,
                                _colors.black);
                end
            end
        end
    end
end

#ifdef __GAME_STATE_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxColor(_REN, 0,0, _REN_W,_REN_H, _colors.black);
    end
with
    [[ dofile 'g1.lua' ]]
    var int len = [[ #STATES ]];

    var Map map;

    loop do
        loop i in len do
            var GameState s with
                _.map = map;
                _.idx = i+1;
            end;
            await SDL_KEYDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
