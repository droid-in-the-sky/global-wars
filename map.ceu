#ifndef _MAP_CEU
#define _MAP_CEU

#include "c.ceu"
#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui.ceu"
#include "sdl-colors.ceu"

input void SDL_QUIT;
input void SDL_REDRAW;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;

native @pure _P(), _I();
native do
    int P (int p, int c, int dp, int zoom) {
        return (dp + p - c) * zoom / 100 + c;
    }
    int I (int i, int c, int dp, int zoom) {
        return (i - c) * 100 / zoom + c - dp;
    }
end

class Map with
    var int  n;   // number of countries
    var u16* cx;  // all country centers
    var u16* cy;  // all country centers

    event int       go_zoom;
    event (int,int) go_xy;
    event int       ok_clicked;
    event void      ok_changed;

    var int x = 0;
    var int y = 0;
    var int zoom = 100;
do
    _assert(_REN != null);

    this.n = [[#MAP]];

    // cx / cy (pos n=0 unused, malloc 1 extra)
    finalize
        this.cx = _malloc((this.n+1) * sizeof(u16));
    with
        _free(this.cx);
    end
    finalize
        this.cy = _malloc((this.n+1) * sizeof(u16));
    with
        _free(this.cy);
    end

    var int xc = _REN_W / 2;
    var int yc = _REN_H / 2;

    [[
        xmin, xmax = xs_min_max()
        ymin, ymax = ys_min_max()
    ]]
    var int xmin = [[xmin]];
    var int xmax = [[xmax]];
    var int ymin = [[ymin]];
    var int ymax = [[ymax]];

    do
        var int  w = xmax - xmin;
        var int  h = ymax - ymin;
        var int dx = _REN_W - w;
        var int dy = _REN_H - h;

        // best fit
        if dx < dy then
            zoom = 100*_REN_W / w;
        else
            zoom = 100*_REN_H / h;
        end

        // center on x / y
        this.x = dx/2 - xmin;
        this.y = dy/2 - ymin;
    end

    par do
        loop do
            // center
            loop i_ in this.n do
                var int i = i_ + 1;     // C => Lua indexing
                this.cx[i] = [[ MAP[@i].center[1] ]];
                this.cy[i] = [[ MAP[@i].center[2] ]];
                this.cx[i] = _P(this.cx[i], xc, this.x, zoom);
                this.cy[i] = _P(this.cy[i], yc, this.y, zoom);
            end

            emit this.ok_changed;

            par/or do
                this.zoom = await go_zoom;     // ZOOM
            with
                var int x_,y_;
                (x_,y_) = await go_xy;           // PAN
                this.x = x_;
                this.y = y_;
            end
        end
    with
        // OK_CLICKED
        var _SDL_MouseButtonEvent* but;
        every but in SDL_MOUSEBUTTONDOWN do
            var int x_ = _I(but:x, xc, this.x, zoom);
            var int y_ = _I(but:y, yc, this.y, zoom);
            var int c = [[ MAP_vspoint(@x_, @y_) ]];
            if c > 0 then
                emit this.ok_clicked => c;
            end
        end
    with
        every SDL_REDRAW do
            var int n_ = 1;      // traverses xs/ys continuously

            // sea
            _boxColor(_REN,
                _P(0,xc,this.x,zoom),
                _P(0,yc,this.y,zoom),
                _P(xmax,xc,this.x,zoom),
                _P(ymax,yc,this.y,zoom),
                _colors.blue);

            // for each country [0, #MAP)
            loop i_ in this.n do
                var int i = i_ + 1;     // C => Lua indexing
                var u16[25] xs, ys;     // TODO: negative values?

                var int pts = [[ TMAP.ns[@i] ]];

                // for each point [0, ns[i])
                loop j in pts do
                    xs[j] = [[ TMAP.xs[@n_] ]];
                    ys[j] = [[ TMAP.ys[@n_] ]];
                    xs[j] = _P(xs[j], xc, this.x, zoom);
                    ys[j] = _P(ys[j], yc, this.y, zoom);
                    n_ = n_ + 1; // traverses xs/ys continuously
                end

                // draw country with color
                var int r = [[ MAP[@i].color[1] ]];
                var int g = [[ MAP[@i].color[2] ]];
                var int b = [[ MAP[@i].color[3] ]];
                _filledPolygonRGBA(_REN, xs, ys, pts, r,g,b, 0xFF);

                // draw country border
                _polygonColor(_REN, xs, ys, pts, _colors.black);

                // draw center
                var int cx = [[ MAP[@i].center[1] ]];
                        cx = _P(cx, xc, this.x, zoom);
                var int cy = [[ MAP[@i].center[2] ]];
                        cy = _P(cy, yc, this.y, zoom);
                _boxColor(_REN, cx-1,cy-1, cx+1,cy+1, _colors.black);
            end

            // for each border dotted line
            var int ls = [[ #MAP.lines ]];
            loop l in ls do
                var int x1 = [[ MAP.lines[@l+1][1] ]];
                var int y1 = [[ MAP.lines[@l+1][2] ]];
                var int x2 = [[ MAP.lines[@l+1][3] ]];
                var int y2 = [[ MAP.lines[@l+1][4] ]];
                _lineRGBA(_REN,
                    _P(x1, xc, this.x, zoom),
                    _P(y1, yc, this.y, zoom),
                    _P(x2, xc, this.x, zoom),
                    _P(y2, yc, this.y, zoom),
                    0,0,0,0xFF);
            end

            // for each border { {p1,p2}, {p3,p4}, ... }
/**
            _lua_getglobal(_L, "BORDERS"); // [ B ]
            loop i_, _lua_objlen(_L,1) do
                var int i = i_ + 1;     // C => Lua indexing
                _lua_rawgeti(_L, -1, i);   // [ B | t ]
                _lua_rawgeti(_L, -1, 1);   // [ B | t | p1 ]
                _lua_rawgeti(_L, -2, 2);   // [ B | t | p1 | p2 ]
                _lua_rawgeti(_L, -2, 1);   // [ B | t | p1 | p2 | x1 ]
                _lua_rawgeti(_L, -3, 2);   // [ B | t | p1 | p2 | x1 | y1 ]
                _lua_rawgeti(_L, -3, 1);   // [ B | t | p1 | p2 | x1 | y1 | x2 ]
                _lua_rawgeti(_L, -4, 2);   // [ B | t | p1 | p2 | x1 | y1 | x2 | y2 ]
                _lineRGBA(_REN,
                    _P(_lua_tointeger(_L,-4), xc, this.x, zoom),
                    _P(_lua_tointeger(_L,-3), yc, this.y, zoom),
                    _P(_lua_tointeger(_L,-2), xc, this.x, zoom),
                    _P(_lua_tointeger(_L,-1), yc, this.y, zoom),
                    0,0,0, 0xFF);
                _lua_pop(_L, 7);           // [ B ]
            end
            _lua_pop(_L, 1);               // [ ]
**/
        end
    end
end

/* MapFinger */

input _SDL_TouchFingerEvent* SDL_FINGERDOWN;
input _SDL_TouchFingerEvent* SDL_FINGERUP;
input _SDL_TouchFingerEvent* SDL_FINGERMOTION;

class MapFinger with
    var Map& map;
do
    loop do
        var _SDL_TouchFingerEvent* e1_ = await SDL_FINGERDOWN;
        var _SDL_TouchFingerEvent  e1 = *e1_;

        par/or do
            var _SDL_TouchFingerEvent* e2_ =
                   await SDL_FINGERUP         // restart all on release of "f1"
            until e2_:fingerId == e1.fingerId;
        with
            // PAN
            var _SDL_TouchFingerEvent e2;
            par/or do
                var _SDL_TouchFingerEvent* e2_ :=
                    await SDL_FINGERDOWN  // go to zoom when pressing "f2"
                        until e2_:fingerId != e1.fingerId;
                e2 = *e2_; // struct
            with
                var int x = map.x;
                var int y = map.y;
                loop do                      // stay in pan while not "f2"
                    var _SDL_TouchFingerEvent* e2_ :=
                        await SDL_FINGERMOTION
                            until e2_:fingerId == e1.fingerId;
                    emit map.go_xy => (x + (e2_:x-e1.x)*_REN_W/2,
                                       y + (e2_:y-e1.y)*_REN_H/2);
                end
            end

            // ZOOM until "f1" is released

            loop do
                var _float dx = e2.x - e1.x;
                var _float dy = e2.y - e1.y;
                var _float mA = dx * dy;

                par/or do
                    var _SDL_TouchFingerEvent* e3_ =
                        await SDL_FINGERUP // restart zoom on release of "f2"
                          until e3_:fingerId == e2.fingerId;
                with
                    loop do                     // stay in zoom until any release
                        var _SDL_TouchFingerEvent* e3_ =
                            await SDL_FINGERMOTION;
                        var _float mB = e3_:dx * e3_:dy;
                        if (mA > 0) and (mB < 0) or     // main diagonal
                           (mA < 0) and (mB > 0) then   // opposite diagonal
                            continue;  // unexpected zoom gesture
                        end

                        var int z;
                        if (e3_:x > e1.x) and (e3_:x > e2.x)
                        or
                           (e3_:x < e1.x) and (e3_:x < e2.x) then
                            z =  3;
                        else
                            z = -3;
                        end

                        emit map.go_zoom => map.zoom + z;
                        e2 = *e3_;
                    end
                end

                // next zoom start finger
                var _SDL_TouchFingerEvent* e3_ :=
                    await SDL_FINGERDOWN
                      until e3_:fingerId != e1.fingerId;
                e2 = *e3_;
            end
        end
    end
end

#ifdef __MAP_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    #include "simul.ceu"
***/
with
    every SDL_REDRAW do
        _boxColor(_REN, 0,0, _REN_W,_REN_H, _colors.black);
    end
with
    do
        [[
            if __ANDROID then
                dofile '/data/data/org.droid_in_the_sky.global_wars/lib/lib_lua_map4.so'
            else
                dofile 'map4.lua'
            end
        ]]
        var Map map;
        var MapFinger fgr with
            this.map = map;
        end;
        await 3s;
    end

    [[ dofile "map4.lua" ]]
    var Map map;
    await 2s;

    loop i in 200 do
        await 50ms;
        if i % 2 == 0 then
            emit map.go_xy => (map.x+1,map.y+0);
        else
            emit map.go_xy => (map.x+0,map.y+1);
        end
    end
    loop i in 200 do
        await 51ms;
        emit map.go_zoom => map.zoom-1;
    end
    loop do
        await 101ms;
        emit map.go_zoom => map.zoom+1;
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif

#endif
