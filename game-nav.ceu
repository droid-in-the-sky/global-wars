#ifndef _GAME_NAV_CEU
#define _GAME_NAV_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui.ceu"
#include "ui-texture.ceu"
#include "ui-grid.ceu"
#include "map.ceu"
#include "game-state.ceu"
#include "game-move.ceu"

input void SDL_REDRAW;
input void SDL_MOUSEBUTTONDOWN;

input _SDL_KeyboardEvent* SDL_KEYDOWN;

class GameNav with
    var Map* map   = null;
    var int  me    = 0;
    var int  state = 0;
    event void ok;
do
    _assert(_REN != null);
    _assert(_L   != null);
    _assert(_TEX_L  != null);
    _assert(_TEX_R  != null);
    _assert(_TEX_OK != null);

    _assert(this.map != null);
    _assert(this.me  != 0);

    _lua_getglobal(_L, "STATES");      // [ SS ]
    var int ns = _lua_objlen(_L, -1);
    _lua_pop(_L, 1);                   // [ ]

    // defaults to last
    if this.state == 0 then
        this.state = ns;
    end

    // if in attack/fortify, animate "ing":
    //      prev =-2s-=> cur
    if this.state>1 and (this.state%2 == 1) then
        do
            var GameState st with
                this.map = map;
                this.idx = state-1;
            end;
            var GameMove mv with
                this.map = map;
                this.idx = (state-1)/2;
            end;
            await 2s;
        end
        do
            var GameState st with
                this.map = map;
                this.idx = state;
            end;
        end
    end

    // GRID "all"
    var _SDL_Rect r;        // whole screen
        r.x = 0;
        r.y = 0;
        r.w = _REN_W;
        r.h = _REN_H;
    var UIGrid g1 with
        this.ren = _REN;
        this.lay_lins = 4;
        this.lay_cols = 4;
        this.lay = _GN_g1;
        this.uis_n = 1;
        native do
            int GN_g1[16] = {
                -1, -1, -1, -1,
                -1, -1, -1, -1,
                -1, -1, -1, -1,
                -1, -1, -1,  0      // menu
            };
        end
    end;

    // GRID "menu"
    var UIGrid g2 with
        this.ren = _REN;
        this.lay_lins = 2;
        this.lay_cols = 3;
        this.lay = _GN_g2;
        this.uis_n = 3;
        native do
            int GN_g2[] = {
                -1, -1, -1,
                 0,  1,  2,  // < , > , ok
            };
        end
    end;
    // ui_l
        var UITexture ui_l with
            this.ren = _REN;
            this.tex = _TEX_L;
        end;
    // ui_r
        var UITexture ui_r with
            this.ren = _REN;
            this.tex = _TEX_R;
        end;
    // ui_ok
        var UITexture ui_ok with
            this.ren = _REN;
            this.tex = _TEX_OK;
        end;

    g1.uis[0] = &g2;    // include "menu"
        g2.uis[0] = &ui_l;  // <
        g2.uis[1] = &ui_r;  // >
        g2.uis[2] = &ui_ok; // ok

    g1._go_rect(&r);

    loop do
        var GameState st with
            this.map = map;
            this.idx = state;
        end;

        var int dir;

        par/or do
            // only even states have moves
            if this.state % 2 == 0 then
                var GameMove mv with
                    this.map = map;
                    this.idx = state/2;     // 2 states for 1 move
                end;
                await FOREVER;
            end
            await FOREVER;
        with
            loop do
                var _SDL_KeyboardEvent* key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_RIGHT then
                    dir =  1;
                    break;
                else/if key:keysym.sym == _SDLK_LEFT then
                    dir = -1;
                    break;
                end
            end
        with
            await ui_l.ok_clicked;
            dir = -1;
        with
            await ui_r.ok_clicked;
            dir =  1;
        with
            await ui_ok.ok_clicked;
            break;
        end

        // forward // rewind
        this.state = state + dir;

        // cycle 1<=>ns
        if this.state > ns then
            this.state = 1;
        else/if this.state == 0 then
            this.state = ns;
        end
    end

    emit this.ok;
end

#ifdef __GAME_NAV_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxColor(_REN, 0,0, _REN_W,_REN_H, _colors.black);
    end
with
    loop do
        do
            _assert(_luaL_dofile(_L, "g1.lua") == 0);
            var Map map;
            var GameNav nav with
                this.map   = &map;
                this.me    = 1;
                this.state = 1;
            end;
            await nav.ok;
        end
        do
            _assert(_luaL_dofile(_L, "g1.lua") == 0);
            var Map map;
            var GameNav nav with
                this.map   = &map;
                this.me    = 1;
            end;
            await nav.ok;
        end
        do
            _assert(_luaL_dofile(_L, "g2.lua") == 0);
            var Map map;
            var GameNav nav with
                this.map   = &map;
                this.me    = 1;
                this.state = 1;
            end;
            await nav.ok;
        end
        do
            _assert(_luaL_dofile(_L, "g3.lua") == 0);
            var Map map;
            var GameNav nav with
                this.map   = &map;
                this.me    = 1;
                this.state = 1;
            end;
            await nav.ok;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;

#endif
#endif
