import lua.ceu;
import sdl.ceu;
import sdl-gfx.ceu;

import ui.ceu;
import map.ceu;
import game-state.ceu;
import game-move.ceu;

input void SDL_REDRAW;
input void SDL_KEYDOWN;
input void SDL_MOUSEBUTTONDOWN;

class GameNav with
    var Map* map = null;
    var int state = 0;
do
    _assert(_REN != null);
    _assert(_L   != null);

    _assert(this.map != null);

    _lua_getglobal(_L, "STATES");      // [ SS ]
    var int ns = _lua_objlen(_L, -1);
    _lua_remove(_L, 1);                // [ ]

    // defaults to #SS
    if this.state == 0 then
        if ns % 2 == 0 then
            this.state = ns - 1;    // before "ing"
        else
            this.state = ns;
        end
    end

    _assert(this.state % 2 == 1);   // attack or fortify

    loop do
        var GameState st with
            this.map = map;
            this.idx = state;
        end;

        await SDL_KEYDOWN;

        this.state = this.state + 1;
        if this.state > ns then
            this.state = 1;
            continue;
        end

        st.idx = st.idx + 1;        // attack/fortify => "ing"
        var GameMove mv with
            this.map = map;
            this.idx = state/2;     // 2 states for 1 move
        end;

        await SDL_KEYDOWN;

        this.state = this.state + 1;
        if this.state > ns then
            this.state = 1;
            continue;
        end
    end
end

/*
native do
    lua_State*    L   = NULL;
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end
*/

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("Game Navigation",
                            500, 400, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end
_SDL_GetWindowSize(win, &_REN_W, &_REN_H);

_REN = _SDL_CreateRenderer(win, -1, 0);
finalize with
    _SDL_DestroyRenderer(_REN);
end

_L = _luaL_newstate();
finalize with
    _lua_close(_L);
end
_lua_atpanic(_L, _ceu_lua_atpanic);
_luaL_openlibs(_L);

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    loop do
        do
            _luaL_loadfile(_L, "g1.lua");
            _lua_call(_L, 0, 0);
            var Map map;
            var GameNav nav with
                this.map = &map;
                this.state = 1;
            end;
            await SDL_MOUSEBUTTONDOWN;
        end
        do
            _luaL_loadfile(_L, "g2.lua");
            _lua_call(_L, 0, 0);
            var Map map;
            var GameNav nav with
                this.map = &map;
                this.state = 1;
            end;
            await SDL_MOUSEBUTTONDOWN;
        end
        do
            _luaL_loadfile(_L, "g3.lua");
            _lua_call(_L, 0, 0);
            var Map map;
            var GameNav nav with
                this.map = &map;
                this.state = 1;
            end;
            await SDL_MOUSEBUTTONDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;
