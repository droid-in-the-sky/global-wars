#ifndef _MENU_NEW_CEU
#define _MENU_NEW_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "colors.ceu"
#include "ui.ceu"
#include "ui-grid.ceu"
#include "ui-texture.ceu"

input void SDL_REDRAW;

class MenuNewPlayer with
    var int     n    = 0;
    var UIGrid& grid;
    var char[]  type;
do
    _assert(_REN       != null);
    _assert(_BGS       != null);
    _assert(_TEX_HUMAN != null);
    _assert(_TEX_AI    != null);
    _assert(_TEX_NONE  != null);

    _assert(this.n    != 0);

    var bool first? = true;

    loop do
        // human
        if (not first?) or (this.n == 1) then
            this.type := "human";
                         // TODO: constant should not require :=
            do
                var UITexture ui with
                    _.ren    := _REN;
                    _.tex    := _TEX_HUMAN;
                    _.bg_clr := _BGS[n];
                end;
                spawn UIGridItem in this.grid.uis with
                    _.idx = this.n - 1;
                    _.ui  = &ui;
                end;
                await ui.ok_clicked;
            end
        end

        // ai
        this.type := "ai";
                     // TODO: constant should not require :=
        do
            var UITexture ui with
                _.ren    := _REN;
                _.tex    := _TEX_AI;
                _.bg_clr := _BGS[n];
            end;
            spawn UIGridItem in this.grid.uis with
                _.idx = this.n - 1;
                _.ui  = &ui;
            end;
            await ui.ok_clicked;
        end

        // none
        this.type = null;
        do
            var UITexture ui with
                _.ren    := _REN;
                _.tex    := _TEX_NONE;
                _.bg_clr := _BGS[n];
            end;
            spawn UIGridItem in this.grid.uis with
                _.idx = this.n - 1;
                _.ui  = &ui;
            end;
            await ui.ok_clicked;
        end

        first? = false;
    end
end

class MenuNew with
    event void ok;
do
    _assert(_REN != null);

    var UIGrid grid with
        _.ren := _REN;
        _.lay_lins = 6;
        _.lay_cols = 7;
        _.lay := _MenuNew_grid;
        _.uis_n = 2;
        native do
            int MenuNew_grid[] = {
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0,  1
            };
        end
    end;

    var UIGrid grid_ps with
        _.ren       := _REN;
        _.bg_redim? = true;
        _.lay_lins  = 2;
        _.lay_cols  = 3;
        _.lay       := _MenuNew_grid_ps;
        _.uis_n     = 6;
        _.spc_x     = 20;
        _.spc_y     = 20;
        native do
            int MenuNew_grid_ps[] = {
                0, 1, 2,
                3, 4, 5
            };
        end
    end;

    var UITexture ui_ok with
        _.ren := _REN;
        _.tex := _TEX_OK;
    end;

    var _SDL_Rect r;        // whole screen
        r.x = _REN_W / 2;
        r.y = _REN_H / 2;
        r.w = _REN_W;
        r.h = _REN_H;

    spawn UIGridItem in grid.uis with
        _.idx = 0;
        _.ui  = &grid_ps;
    end;
    spawn UIGridItem in grid.uis with
        _.idx = 1;
        _.ui  = &ui_ok;
    end;
    call/rec grid.go(&r);

    var int i = 1;
    var MenuNewPlayer [6] ps with
        _.n    = i;
        _.grid = grid_ps;
        i = i + 1;
    end;

    await ui_ok.ok_clicked;

    [[ PLAYERS = {} ]];

    loop i_ in 6 do
        if ps[i_].type == null then
            [[ PLAYERS[@i_+1] = false ]];
        else
            [[ PLAYERS[@i_+1] = @ps[i_].type ]];
        end
    end

    // GAMES[#GAMES+1] = file
    // save in "games/XXXXXX.lua"
    [[ GAMES[#GAMES+1] = dofile'scripts/menu-new-1.lua' ]];

    // save main.lua
    [[
        local f = assert(io.open('main.lua', 'w'))
        f:write('GAMES = '..table2string(GAMES)..'\n')
        f:close()
    ]]

    emit this.ok;
end

#ifdef __MENU_NEW_CEU

#include "all.ceu"

input void SDL_QUIT;

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    var MenuNew menu;
    await menu.ok;

with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
