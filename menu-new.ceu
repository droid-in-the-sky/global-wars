#ifndef _MENU_NEW_CEU
#define _MENU_NEW_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "sdl-colors.ceu"
#include "ui.ceu"
#include "ui-grid.ceu"
#include "ui-texture.ceu"

input void SDL_REDRAW;

class MenuNewPlayer with
    var int     n    = 0;
    var UIGrid& grid;
    var char[]  type;
do
    _assert(_REN       != null);
    _assert(_BGS       != null);
    _assert(_TEX_HUMAN != null);
    _assert(_TEX_AI    != null);
    _assert(_TEX_NONE  != null);

    _assert(this.n    != 0);

    var bool first? = true;

    var UITexture ui with
        this.ren    := _REN;
        this.tex    := _TEX_HUMAN;
        this.bg_clr := _BGS[n];
        this.pad_x  = _REN_W / 5;
        this.pad_y  = _REN_H / 3;
        this.rect_mul = 2;
    end;
    spawn UIGridItem in this.grid.uis with
        this.idx = outer.n - 1;
        this.ui  = &ui;
    end;

    loop do
        // human
        if (not first?) or (this.n == 1) then
            this.type := "human"; // TODO: constant should not require :=
            ui.tex := _TEX_HUMAN;
            await ui.ok_clicked;
        end

        // ai
        this.type := "ai"; // TODO: constant should not require :=
        ui.tex := _TEX_AI;
        await ui.ok_clicked;

        // net
        this.type := "net"; // TODO: constant should not require :=
        ui.tex := _TEX_NET;
        await ui.ok_clicked;

        // none
        this.type = null;
        ui.tex := _TEX_NONE;
        await ui.ok_clicked;

        first? = false;
    end
end

class MenuNew with
    event void ok;
do
    _assert(_REN != null);

    var UIGrid grid with
        this.ren := _REN;
        this.lay_lins = 6;
        this.lay_cols = 7;
        this.lay := _MenuNew_grid;
        this.uis_n = 2;
        this.clr_bg := &_colors.brown;
        native do
            int MenuNew_grid[] = {
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0,  1
            };
        end
    end;

    var UIGrid grid_ps with
        this.ren       := _REN;
        this.lay_lins  = 2;
        this.lay_cols  = 3;
        this.lay       := _MenuNew_grid_ps;
        this.uis_n     = 6;
        this.spc_x     = 20;
        this.spc_y     = 20;
        native do
            int MenuNew_grid_ps[] = {
                0, 1, 2,
                3, 4, 5
            };
        end
    end;

    var UITexture ui_ok with
        this.ren := _REN;
        this.tex := _TEX_OK;
        //this.bg_clr := &_colors.white;
        this.rect_mul = 1.5;
    end;

    var _SDL_Rect r;        // whole screen
        r.x = 0;
        r.y = 0;
        r.w = _REN_W;
        r.h = _REN_H;

    spawn UIGridItem in grid.uis with
        this.idx = 0;
        this.ui  = &grid_ps;
    end;
    spawn UIGridItem in grid.uis with
        this.idx = 1;
        this.ui  = &ui_ok;
    end;

    var int i = 1;
    var MenuNewPlayer [6] ps with
        this.n    = i;
        this.grid = grid_ps;
        i = i + 1;
    end;

    call/rec grid.go_bg(&r, true);
    await ui_ok.ok_clicked;

    [[ PLAYERS = {} ]];

    loop i_ in 6 do
        if ps[i_].type == null then
            [[ PLAYERS[@i_+1] = false ]];
        else
            [[ PLAYERS[@i_+1] = @ps[i_].type ]];
        end
    end

    // GAMES[#GAMES+1] = file
    // save in "games/XXXXXX.lua"
    [[ GAMES[#GAMES+1] = dofile(__LUA_NEW) ]];

    // save main.lua
    [[
        local f = assert(io.open(__LUA_MAIN, 'w'))
        f:write('GAMES = '..table2string(GAMES)..'\n')
        f:close()
    ]]

    emit this.ok;
end

#ifdef __MENU_NEW_CEU

#include "all.ceu"

input void SDL_QUIT;

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    do MenuNew;
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
