#ifndef _MENU_NEW_CEU
#define _MENU_NEW_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "colors.ceu"
#include "ui.ceu"
#include "ui-grid.ceu"
#include "ui-texture.ceu"

input void SDL_REDRAW;

class MenuNewPlayer with
    var int     n    = 0;
    var UIGrid* grid = null;
    var _char*  type;
do
    _assert(_REN       != null);
    _assert(_BGS       != null);
    _assert(_TEX_HUMAN != null);
    _assert(_TEX_AI    != null);
    _assert(_TEX_NONE  != null);

    _assert(this.n    != 0);
    _assert(this.grid != null);

    var bool first? = true;

    loop do
        // human
        if (not first?) or (this.n == 1) then
            this.type = "human";
            do
                var UITexture ui with
                    this.ren    = _REN;
                    this.tex    = _TEX_HUMAN;
                    this.bg_clr = _BGS[n];
                end;
                this.grid:go_ui(this.n-1, &ui)
                    finalize with nothing; end; // grid > ui
                await ui.ok_clicked;
            end
        end

        // ai
        this.type = "ai";
        do
            var UITexture ui with
                this.ren    = _REN;
                this.tex    = _TEX_AI;
                this.bg_clr = _BGS[n];
            end;
            this.grid:go_ui(this.n-1, &ui)
                finalize with nothing; end; // grid > ui
            await ui.ok_clicked;
        end

        // none
        this.type = null;
        do
            var UITexture ui with
                this.ren    = _REN;
                this.tex    = _TEX_NONE;
                this.bg_clr = _BGS[n];
            end;
            this.grid:go_ui(this.n-1, &ui)
                finalize with nothing; end; // grid > ui
            await ui.ok_clicked;
        end

        first? = false;
    end
end

class MenuNew with
    event void ok;
do
    _assert(_REN != null);
    _assert(_L   != null);

    var UIGrid grid with
        this.ren = _REN;
        this.lay_lins = 6;
        this.lay_cols = 7;
        this.lay = _MenuNew_grid;
        this.uis_n = 2;
        native do
            int MenuNew_grid[] = {
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0, -1,
                0, 0, 0, 0, 0, 0,  1
            };
        end
    end;

    var UIGrid grid_ps with
        this.ren       = _REN;
        this.bg_redim? = true;
        this.lay_lins  = 2;
        this.lay_cols  = 3;
        this.lay       = _MenuNew_grid_ps;
        this.uis_n     = 6;
        this.spc_x     = 20;
        this.spc_y     = 20;
        native do
            int MenuNew_grid_ps[] = {
                0, 1, 2,
                3, 4, 5
            };
        end
    end;

    var UITexture ui_ok with
        this.ren = _REN;
        this.tex = _TEX_OK;
    end;

    var _SDL_Rect r;        // whole screen
        r.x = _REN_W / 2;
        r.y = _REN_H / 2;
        r.w = _REN_W;
        r.h = _REN_H;

    grid.uis[0] = &grid_ps;
    grid.uis[1] = &ui_ok;
    grid.go(&r);

    var int i = 1;
    var MenuNewPlayer [6] ps with
        this.n    = i;
        this.grid = &grid_ps;
        i = i + 1;
    end;

    await ui_ok.ok_clicked;

    // PLAYERS = {}
    _lua_newtable(_L);              // [ {} ]
    _lua_setglobal(_L, "PLAYERS");  // [ ]

    // PLAYERS[i] = type
    _lua_getglobal(_L, "PLAYERS");          // [ PP ]
    loop i_, 6 do
        if ps[i_].type == null then
            _lua_pushboolean(_L, 0);            // [ PP | false ]
            _lua_rawseti(_L, -2, i_+1);         // [ PP ]
        else
            _lua_pushstring(_L, ps[i_].type);   // [ PP | v ]
            _lua_rawseti(_L, -2, i_+1);         // [ PP ]
        end
    end
    _lua_pop(_L, 1);                        // [ ]

    // save in "games/XXXXXX.lua"
    _assert(_luaL_dofile(_L, "scripts/menu-new-1.lua") == 0);
                                    // [ file ]

    // GAMES[#GAMES+1] = file
    _lua_getglobal(_L, "GAMES");    // [ file | GG ]
    var int n = _lua_objlen(_L, -1);
    _lua_pushvalue(_L, -2);         // [ file | GG | file ]
    _lua_rawseti(_L, -2, n+1);      // [ file | GG ]
    _lua_pop(_L, 2);                // [ ]

    // save main.lua
    var _char* src =
        "local f = assert(io.open('main.lua', 'w'))     \
         f:write('GAMES = '..table2string(GAMES)..'\\n') \
         f:close()";
    _assert( _luaL_dostring(_L, src) == 0 );

    emit this.ok;
end

#ifdef __MENU_NEW_CEU

#include "all.ceu"

input void SDL_QUIT;

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    var MenuNew menu;
    await menu.ok;

with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
