#ifndef _GAME_FORTIFY_CEU
#define _GAME_FORTIFY_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui-texture.ceu"
#include "ui-grid.ceu"
#include "map.ceu"
#include "game-state.ceu"
#include "game-move.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

class GameFortify with
    var Map& map;
    var int  me  = 0;
    event void ok;
do
    _assert(_REN  != null);
    _assert(_FONT_30 != null);
    _assert(_FONT_20 != null);
    _assert(_TEX_NO != null);
    _assert(_TEX_OK != null);

    _assert(this.me  != 0);

    // last "fortify" state
    var int state = [[ #STATES ]];
    do
        var char[25] str = [[ STATES[@state].type ]];
        _assert( _strcmp("fortify", str) == 0 );
    end

    // # of armies to fortify
    var int fs = [[ SRV_fs(STATES[@state], @this.me) ]];

    // AWAIT center click
    do
        // header: "FORTIFY: N"
        var UIGrid header with
            this.ren := _REN;
            this.lay_lins = 2;
            this.lay_cols = 2;
            this.lay := _GF_g1;
            this.uis_n = 2;
            native do
                int GF_g1[] = {
                    0,  0,
                    1,  1
                };
            end
        end;

        // show current state
        var GameState st with
            this.ren := _REN;
            this.map = map;
            this.idx = state;    // start from last
        end;

        // "Fortify"
        var _char[15] str1;
        _sprintf(str1, "%s", "Fortify");
        var _SDL_Texture* tex1;
            finalize
                tex1 = _SDL_text2texture(_REN, _FONT_30, str1,
                                        &_colors.black, _BGS[this.me]);
            with
                _SDL_DestroyTexture(tex1);
            end
        var UITexture ui1 with
            this.ren := _REN;
            this.tex := tex1;
            this.bg_clr := _BGS[me];
        end;

        spawn UIGridItem in header.uis with
            this.idx = 0;
            this.ui  = &ui1;
        end;

        // N
        var _char[5] str2;
        _sprintf(str2, "%d", fs);
        var _SDL_Texture* tex2;
            finalize
                tex2 = _SDL_text2texture(_REN, _FONT_30, str2,
                                        &_colors.black, _BGS[this.me]);
            with
                _SDL_DestroyTexture(tex2);
            end
        var UITexture ui2 with
            this.ren := _REN;
            this.tex := tex2;
            this.bg_clr := _BGS[me];
        end;

        spawn UIGridItem in header.uis with
            this.idx = 1;
            this.ui  = &ui2;
        end;

        var _SDL_Rect r;
            r.x = _REN_W / 4;
            r.y = _REN_H / 3;
            r.w = _REN_W / 2;
            r.h = _REN_H / 3;
        call/rec header.go_bg(&r, true);
        await 2s;
        //await SDL_MOUSEBUTTONDOWN;
    end

    // GRID "menu"
    var UIGrid menu with
        this.ren := _REN;
        this.lay_lins = 2;
        this.lay_cols = 2;
        this.lay := _GF_g2;
        this.uis_n = 3;
        this.clr_bg := &_colors.gray_75;
        native do
            int GF_g2[] = {
                0,  0,  // fs
                1,  2   // no, ok
            };
        end
    end;
    var _SDL_Rect r;
        r.x = _REN_W;
        r.y = _REN_H;
        r.w = _REN_W/4;
        r.h = _REN_H/4;
    menu.align_x = _UI_ALIGN_RIGHT;
    menu.align_y = _UI_ALIGN_BOTTOM;
    call/rec menu.go(&r);

    // loop until all "fs" are chosen
    //  - restart on "no"   (only when fs<tot)
    //  - quit    on "ok"   (only when fs==0)

    finalize with
        [[ armies = nil ]];
    end

    loop do

        // emitted whenever "fs" changes
        event int e;

        var int fs_tmp = fs;

        // restart armies table
        [[ armies = {} ]]

        par/or do
            loop do
                // new state "fortifying"
                [[ SRV_move_ins(@this.me, armies) ]];
                finalize with
                    [[ SRV_move_rem() ]];
                end

                // show next state
                var GameState st with
                    this.ren := _REN;
                    this.map = map;
                    this.idx = state+1;     // tmp state
                end;

                // show next move
                var GameMove mv with
                    this.map = map;
                    this.idx = (state+1)/2; // tmp move
                end;

                var _SDL_Color bg = *_BGS[me];
                    bg.a = 0xBB;

                // text texture
                var _char[5] str;
                _sprintf(str, "%d", fs_tmp);
                var _SDL_Texture* tex;
                    finalize
                        tex = _SDL_text2texture(_REN, _FONT_20, str,
                                                &_colors.black, &bg);
                    with
                        _SDL_DestroyTexture(tex);
                    end

                var UITexture ui_fs with
                    this.ren := _REN;
                    this.tex := tex;
                    this.bg_clr = &bg;
                end;

                spawn UIGridItem in menu.uis with
                    this.idx = 0;
                    this.ui  = &ui_fs;
                end;

                // re-arrange all:
                // - loop entering
                // - after every "e"
                call/rec menu.go(null);

                if fs_tmp == 0 then
                    await FOREVER;
                end

                // await until a "me" country => "c"
                var int c;
                loop do
                    c = await map.ok_clicked;
                    var int v = [[ STATES[@state][@me][@c] ]];
                    if v then
                        break;  // a "me" country: ok!
                    end
                end

                // t <- c++
                [[ SRV_move_inc(armies, 1, 0, @c) ]];

                fs_tmp = fs_tmp - 1;
                emit e => fs_tmp;
            end

        with
            // button "NO"
            await e;

            var UITexture ui with
                this.ren := _REN;
                this.tex := _TEX_NO;
                //this.rect_mul = 2;
            end;

            spawn UIGridItem in menu.uis with
                this.idx = 1;
                this.ui  = &ui;
            end;

            // RESTART
            await ui.ok_clicked;

        with
            // button "OK"
            if fs > 0 then
                var int v = await e
                            until v == 0;
            end

            var UITexture ui with
                this.ren := _REN;
                this.tex := _TEX_OK;
                //this.rect_mul = 2;
            end;

            spawn UIGridItem in menu.uis with
                this.idx = 2;
                this.ui  = &ui;
            end;

            if fs > 0 then
                call/rec menu.go(null);   // needed if entering w/o the await
            end

            // QUIT
            await ui.ok_clicked;
            break;
        end
    end

    // new state "fortifying"
    [[ SRV_move(@this.me, armies) ]];

    emit this.ok;
end

#ifdef __GAME_FORTIFY_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    loop do
        [[ dofile 'g_fortify.lua' ]];
        var Map map with
            this.ren := _REN;
        end;

        do GameFortify with
            this.map = map;
            this.me  = 1;
        end;
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;

#endif
#endif
