#ifndef _GAME_FORTIFY_CEU
#define _GAME_FORTIFY_CEU

#include "lua.ceu"
#include "sdl.ceu"
#include "sdl-gfx.ceu"

#include "ui-texture.ceu"
#include "ui-grid.ceu"
#include "map.ceu"
#include "game-state.ceu"
#include "game-move.ceu"

input void SDL_REDRAW;
input _SDL_KeyboardEvent* SDL_KEYDOWN;
input void SDL_MOUSEBUTTONDOWN;

class GameFortify with
    var Map* map = null;
    var int  me  = 0;
    event void ok;
do
    _assert(_REN  != null);
    _assert(_L    != null);
    _assert(_FONT != null);
    _assert(_TEX_NO != null);
    _assert(_TEX_OK != null);

    _assert(this.map != null);
    _assert(this.me  != 0);

    // last "fortify" state
    var int state;
        _lua_getglobal(_L, "STATES");       // [ SS ]
        state = _lua_objlen(_L, -1);
        _lua_rawgeti(_L, -1, state);       // [ SS | S ]
        _lua_getfield(_L, -1, "type");     // [ SS | S | type ]
        _assert( _lua_type(_L,-1) == _LUA_TSTRING );
        _assert( _strcmp("fortify", _lua_tostring(_L,-1)) == 0 );
        _lua_pop(_L, 2);                    // [ SS ]

    // # of armies to fortify
    var int fs;
        _lua_rawgeti(_L, -1, state);    // [ SS | S ]
        _lua_getglobal(_L, "SRV_fs");   // [ SS | S | f ]
        _lua_pushvalue(_L, -2);         // [ SS | S | f | S ]
        _lua_pushnumber(_L, me);        // [ SS | S | f | S | p ]
        _lua_call(_L, 2, 1);            // [ SS | S | n ]
        fs = _lua_tointeger(_L, -1);
        _lua_pop(_L, 3);                // [ ]

    // GRID "all"
    var _SDL_Rect r;        // whole screen
        r.x = _REN_W / 2;
        r.y = _REN_H / 2;
        r.w = _REN_W;
        r.h = _REN_H;
    var UIGrid g1 with
        this.ren = _REN;
        this.lay_lins = 4;
        this.lay_cols = 4;
        this.lay = _GF_g1;
        this.uis_n = 3;
        native do
            int GF_g1[16] = {
                -1, -1, -1, -1,
                -1,  0,  0, -1,     // fs
                -1,  1,  1, -1,
                -1, -1, -1,  2      // menu
            };
        end
    end;

    // AWAIT center click
    do
        // show current state
        var GameState st with
            this.map = map;
            this.idx = state;    // start from last
        end;

        // "Fortify"
        var _char[15] str;
        _sprintf(str, "%s", "Fortify");
        var _SDL_Texture* tex;
            finalize
                tex = _SDL_text2texture(_REN, _FONT, str,
                                        &_colors.black, _BGS[this.me]);
            with
                _SDL_DestroyTexture(tex);
            end
        var UITexture ui1 with
            this.ren = _REN;
            this.tex = tex;
            this.bg_clr = _BGS[me];
        end;

        finalize
            g1.uis[0] = &ui1; // fs
        with
            g1.uis[0] = null;
        end
        g1.uis[1] = null;       // menu

        // N
        var _char[5] str;
        _sprintf(str, "%d", fs);
        var _SDL_Texture* tex;
            finalize
                tex = _SDL_text2texture(_REN, _FONT, str,
                                        &_colors.black, _BGS[this.me]);
            with
                _SDL_DestroyTexture(tex);
            end
        var UITexture ui2 with
            this.ren = _REN;
            this.tex = tex;
            this.bg_clr = _BGS[me];
        end;

        finalize
            g1.uis[1] = &ui2; // fs
        with
            g1.uis[1] = null;
        end

        g1.uis[2] = null;       // menu
        g1._go(&r);
        await 2s;
    end

    // GRID "menu"
    var UIGrid g2 with
        this.ren = _REN;
        this.bg_redim? = 1;
        this.lay_lins = 2;
        this.lay_cols = 3;
        this.lay = _GF_g2;
        this.uis_n = 3;
        native do
            int GF_g2[] = {
                -1,  0,  0,  // fs
                -1,  1,  2   // no, ok
            };
        end
    end;
    // menu
    g1.uis[2] = &g2;
        g2.uis[0] = null; // fs, changes every click
        g2.uis[1] = null; // no, after 1 click
        g2.uis[2] = null; // ok, when fs==0


    // "ref" holds the table w/ armies
    _lua_pushboolean(_L, 1);    // [ true ]
    var int ref = _luaL_ref(_L, _LUA_REGISTRYINDEX);
                                // [ ]
        finalize with
            _luaL_unref(_L, _LUA_REGISTRYINDEX, ref);
        end


    // loop until all "fs" are chosen
    //  - restart on "no"   (only when fs<tot)
    //  - quit    on "ok"   (only when fs==0)

    loop do

        // emitted whenever "fs" changes
        event int e;

        var int fs_tmp = fs;

        // restart armies table
        _lua_newtable(_L);      // [ armies ]
        _lua_rawseti(_L, _LUA_REGISTRYINDEX, ref);
                                // [ ]

        par/or do
            loop do
                // new state "fortifying"
                _lua_getglobal(_L, "SRV_move_ins");     // [ f ]
                _lua_pushnumber(_L, this.me);           // [ f | p ]
                _lua_rawgeti(_L, _LUA_REGISTRYINDEX, ref);
                                                        // [ f | p | t ]
                _lua_call(_L, 2, 0);                    // [ ]
                finalize with
                    _lua_getglobal(_L, "SRV_move_rem"); // [ f ]
                    _lua_call(_L, 0, 0);                // [ ]
                end

                // show next state
                var GameState st with
                    this.map = map;
                    this.idx = state+1;     // tmp state
                end;

                // show next move
                var GameMove mv with
                    this.map = map;
                    this.idx = (state+1)/2; // tmp move
                end;

                // text texture
                var _char[5] str;
                _sprintf(str, "%d", fs_tmp);
                var _SDL_Texture* tex;
                    finalize
                        tex = _SDL_text2texture(_REN, _FONT, str,
                                                &_colors.black, _BGS[this.me]);
                    with
                        _SDL_DestroyTexture(tex);
                    end

                var UITexture ui_fs with
                    this.ren = _REN;
                    this.tex = tex;
                    this.bg_clr = _BGS[me];
                end;

                finalize
                    g2.uis[0] = &ui_fs;
                with
                    g2.uis[0] = null;
                end

                // re-arrange all:
                // - loop entering
                // - after every "e"
                g1._go(null);

                if fs_tmp == 0 then
                    await FOREVER;
                end

                // await until a "me" country => "c"
                var int c;
                loop do
                    c = await map:ok_clicked;
                    _lua_getglobal(_L, "STATES");   // [ SS ]
                    _lua_rawgeti(_L, -1, state);    // [ SS | S ]
                    _lua_rawgeti(_L, -1, me);       // [ SS | S | Sp ]
                    _lua_rawgeti(_L, -1, c);        // [ SS | S | Sp | Spc ]
                    var int v = _lua_tointeger(_L, -1);
                    _lua_pop(_L, 4);
                    if v then
                        break;  // a "me" country: ok!
                    end
                end

                // t <- c++
                _lua_getglobal(_L, "SRV_move_inc"); // [ f ]
                _lua_rawgeti(_L, _LUA_REGISTRYINDEX, ref);
                                                    // [ f | t ]
                _lua_pushnumber(_L, 1);             // [ f | t | 1 | c ];
                _lua_pushnumber(_L, 0);             // [ f | t | 1 | 0 | c ];
                _lua_pushnumber(_L, c);             // [ f | t | 1 | 0 | c ];
                _lua_call(_L, 4, 0);                // [ ]

                fs_tmp = fs_tmp - 1;
                emit e => fs_tmp;
            end

        with
            // button "NO"
            await e;

            var UITexture ui with
                this.ren = _REN;
                this.tex = _TEX_NO;
            end;

            finalize
                g2.uis[1] = &ui;
            with
                g2.uis[1] = null;
            end

            // RESTART
            await ui.ok_clicked;

        with
            // button "OK"
            if fs > 0 then
                var int v = await e
                            until v == 0;
            end

            var UITexture ui with
                this.ren = _REN;
                this.tex = _TEX_OK;
            end;

            finalize
                g2.uis[2] = &ui;
            with
                g2.uis[2] = null;
            end

            if fs > 0 then
                g2._go(null);   // needed if entering w/o the await
            end

            // QUIT
            await ui.ok_clicked;
            break;
        end
    end

    // new state "fortifying"
    _lua_getglobal(_L, "SRV_move");         // [ f ]
    _lua_pushnumber(_L, this.me);           // [ f | p ]
    _lua_rawgeti(_L, _LUA_REGISTRYINDEX, ref);
                                            // [ f | p | t ]
    _lua_call(_L, 2, 0);                    // [ ]

    emit this.ok;
end

#ifdef __GAME_FORTIFY_CEU

#include "all.ceu"

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    loop do
        do
            _assert(_luaL_dofile(_L, "g1.lua") == 0);
            var Map map;

            var GameFortify fort with
                this.map = &map;
                this.me  = 1;
            end;

            await fort.ok;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;

#endif
#endif
